{"created":[2014,3,11,18,17,20],"id":"00DD864AC7","language":"C++-assert","exercise":"Tennis","unit_test_framework":"cassert","tab_size":4,"visible_files":{"makefile":"run.tests.output : makefile run.tests\n\t./run.tests\n\nrun.tests : makefile *.cpp *.hpp\n\tg++ -std=c++11 -Wall -Werror -O *.cpp -o run.tests","cyber-dojo.sh":"LANG=C\nmake\n","instructions":"Tennis has a rather quirky scoring system, and to newcomers it \ncan be a little difficult to keep track of. The local tennis club\nhas some code that is currently being used to update the scoreboard\nwhen a player scores a point. They has recently acquired two smaller\ntennis clubs, and they two each have a similar piece of code.\n \nYou have just been employed by the tennis club, and your job \nis to refactor all three codebases until you are happy to\nwork with any of them. The future is uncertain, new features may\nbe needed, and you want to be thoroughly on top of your game when\nthat happens.\n \nSummary of Tennis scoring:\n1. A game is won by the first player to have won at least four points \n   in total and at least two points more than the opponent.\n2. The running score of each game is described in a manner peculiar \n   to tennis: scores from zero to three points are described as “love”, \n   “fifteen”, “thirty”, and “forty” respectively.\n3. If at least three points have been scored by each player, and the \n   scores are equal, the score is “deuce”.\n4. If at least three points have been scored by each side and a player\n   has one more point than his opponent, the score of the game is\n   “advantage” for the player in the lead.","tennis_suite.tests.cpp":"#include \"all_tests.hpp\"\n#include <cassert>\n#include <iostream>\n\ntypedef void test();\n\nstatic test * tests[ ] =\n{\n    test_LoveAll_0_0,\n    test_FifteenAll_1_1,\n    test_ThirtyAll_2_2,\n    test_Deuce_3_3,\n    test_Deuce_4_4,\n    test_FifteenLove_1_0,\n    test_LoveFifteen_0_1,\n    test_ThirtyLove_2_0,\n    test_LoveThirty_0_2,\n    test_FortyLove_3_0,\n    test_LoveForty_0_3,\n    test_Winforplayer1_4_0,\n    test_Winforplayer2_0_4,\n    test_ThirtyFifteen_2_1,\n    test_FifteenThirty_1_2,\n    test_FortyFifteen_3_1,\n    test_FifteenForty_1_3,\n    test_Winforplayer1_4_1,\n    test_Winforplayer2_1_4,\n    test_FortyThirty_3_2,\n    test_ThirtyForty_2_3,\n    test_Winforplayer1_4_2,\n    test_Winforplayer2_2_4,\n    test_Advantageplayer1_4_3,\n    test_Advantageplayer2_3_4,\n    test_Advantageplayer1_5_4,\n    test_Advantageplayer2_4_5,\n    test_Advantageplayer1_15_14,\n    test_Advantageplayer2_14_15,\n    test_Winforplayer1_6_4,\n    test_Winforplayer2_4_6,\n    test_Winforplayer1_16_14,\n    test_Winforplayer2_14_16,\n    static_cast<test*>(0),\n};\n\nint main()\n{\n    size_t at = 0;\n    while (tests[at])\n    {\n        tests[at++]();\n        std::cout << '.';\n    }\n    std::cout << std::endl << at << \" tests passed\" << std::endl;\n    return 0;\n}\n","all_tests.hpp":"void test_LoveAll_0_0();\nvoid test_FifteenAll_1_1();\nvoid test_ThirtyAll_2_2();\nvoid test_Deuce_3_3();\nvoid test_Deuce_4_4();\nvoid test_FifteenLove_1_0();\nvoid test_LoveFifteen_0_1();\nvoid test_ThirtyLove_2_0();\nvoid test_LoveThirty_0_2();\nvoid test_FortyLove_3_0();\nvoid test_LoveForty_0_3();\nvoid test_Winforplayer1_4_0();\nvoid test_Winforplayer2_0_4();\nvoid test_ThirtyFifteen_2_1();\nvoid test_FifteenThirty_1_2();\nvoid test_FortyFifteen_3_1();\nvoid test_FifteenForty_1_3();\nvoid test_Winforplayer1_4_1();\nvoid test_Winforplayer2_1_4();\nvoid test_FortyThirty_3_2();\nvoid test_ThirtyForty_2_3();\nvoid test_Winforplayer1_4_2();\nvoid test_Winforplayer2_2_4();\nvoid test_Advantageplayer1_4_3();\nvoid test_Advantageplayer2_3_4();\nvoid test_Advantageplayer1_5_4();\nvoid test_Advantageplayer2_4_5();\nvoid test_Advantageplayer1_15_14();\nvoid test_Advantageplayer2_14_15();\nvoid test_Winforplayer1_6_4();\nvoid test_Winforplayer2_4_6();\nvoid test_Winforplayer1_16_14();\nvoid test_Winforplayer2_14_16();\n","all_tests.cpp":"#include \"all_tests.hpp\"\n\n#define TENNIS_1\n//#define TENNIS_1\n//#define TENNIS_1\n\n#include \"tennis1.cpp\"\n#include \"tennis2.cpp\"\n#include \"tennis3.cpp\"\n\n#include <cassert>\n\nvoid test_LoveAll_0_0()\n{\n    assert(\"Love-All\" == tennis_score(0, 0));\n}\n\nvoid test_FifteenAll_1_1()\n{\n    assert(\"Fifteen-All\" == tennis_score(1, 1));\n}\n\nvoid test_ThirtyAll_2_2()\n{\n    assert(\"Thirty-All\" == tennis_score(2, 2));\n}\n\nvoid test_Deuce_3_3()\n{\n    assert(\"Deuce\" == tennis_score(3, 3));\n}\n\nvoid test_Deuce_4_4()\n{\n    assert(\"Deuce\" == tennis_score(4, 4));\n}\n\nvoid test_FifteenLove_1_0()\n{\n    assert(\"Fifteen-Love\" == tennis_score(1, 0));\n}\n\nvoid test_LoveFifteen_0_1()\n{\n    assert(\"Love-Fifteen\" == tennis_score(0, 1));\n}\n\nvoid test_ThirtyLove_2_0()\n{\n    assert(\"Thirty-Love\" == tennis_score(2, 0));\n}\n\nvoid test_LoveThirty_0_2()\n{\n    assert(\"Love-Thirty\" == tennis_score(0, 2));\n}\n\nvoid test_FortyLove_3_0()\n{\n    assert(\"Forty-Love\" == tennis_score(3, 0));\n}\n\nvoid test_LoveForty_0_3()\n{\n    assert(\"Love-Forty\" == tennis_score(0, 3));\n}\n\nvoid test_Winforplayer1_4_0()\n{\n    assert(\"Win for player1\" == tennis_score(4, 0));\n}\n\nvoid test_Winforplayer2_0_4()\n{\n    assert(\"Win for player2\" == tennis_score(0, 4));\n}\n\nvoid test_ThirtyFifteen_2_1()\n{\n    assert(\"Thirty-Fifteen\" == tennis_score(2, 1));\n}\n\nvoid test_FifteenThirty_1_2()\n{\n    assert(\"Fifteen-Thirty\" == tennis_score(1, 2));\n}\n\nvoid test_FortyFifteen_3_1()\n{\n    assert(\"Forty-Fifteen\" == tennis_score(3, 1));\n}\n\nvoid test_FifteenForty_1_3()\n{\n    assert(\"Fifteen-Forty\" == tennis_score(1, 3));\n}\n\nvoid test_Winforplayer1_4_1()\n{\n    assert(\"Win for player1\" == tennis_score(4, 1));\n}\n\nvoid test_Winforplayer2_1_4()\n{\n    assert(\"Win for player2\" == tennis_score(1, 4));\n}\n\nvoid test_FortyThirty_3_2()\n{\n    assert(\"Forty-Thirty\" == tennis_score(3, 2));\n}\n\nvoid test_ThirtyForty_2_3()\n{\n    assert(\"Thirty-Forty\" == tennis_score(2, 3));\n}\n\nvoid test_Winforplayer1_4_2()\n{\n    assert(\"Win for player1\" == tennis_score(4, 2));\n}\n\nvoid test_Winforplayer2_2_4()\n{\n    assert(\"Win for player2\" == tennis_score(2, 4));\n}\n\nvoid test_Advantageplayer1_4_3()\n{\n    assert(\"Advantage player1\" == tennis_score(4, 3));\n}\n\nvoid test_Advantageplayer2_3_4()\n{\n    assert(\"Advantage player2\" == tennis_score(3, 4));\n}\n\nvoid test_Advantageplayer1_5_4()\n{\n    assert(\"Advantage player1\" == tennis_score(5, 4));\n}\n\nvoid test_Advantageplayer2_4_5()\n{\n    assert(\"Advantage player2\" == tennis_score(4, 5));\n}\n\nvoid test_Advantageplayer1_15_14()\n{\n    assert(\"Advantage player1\" == tennis_score(15, 14));\n}\n\nvoid test_Advantageplayer2_14_15()\n{\n    assert(\"Advantage player2\" == tennis_score(14, 15));\n}\n\nvoid test_Winforplayer1_6_4()\n{\n    assert(\"Win for player1\" == tennis_score(6, 4));\n}\n\nvoid test_Winforplayer2_4_6()\n{\n    assert(\"Win for player2\" == tennis_score(4, 6));\n}\n\nvoid test_Winforplayer1_16_14()\n{\n    assert(\"Win for player1\" == tennis_score(16, 14));\n}\n\nvoid test_Winforplayer2_14_16()\n{\n    assert(\"Win for player2\" == tennis_score(14, 16));\n}\n","tennis1.cpp":"#ifdef TENNIS_1\n\n#include <string>\n\nconst std::string tennis_score(int p1Score, int p2Score) {\n    std::string score = \"\";\n    int tempScore=0;\n    if (p1Score==p2Score)\n    {\n        switch (p1Score)\n        {\n            case 0:\n                    score = \"Love-All\";\n                break;\n            case 1:\n                    score = \"Fifteen-All\";\n                break;\n            case 2:\n                    score = \"Thirty-All\";\n                break;\n            default:\n                    score = \"Deuce\";\n                break;\n            \n        }\n    }\n    else if (p1Score>=4 || p2Score>=4)\n    {\n        int minusResult = p1Score-p2Score;\n        if (minusResult==1) score =\"Advantage player1\";\n        else if (minusResult ==-1) score =\"Advantage player2\";\n        else if (minusResult>=2) score = \"Win for player1\";\n        else score =\"Win for player2\";\n    }\n    else\n    {\n        for (int i=1; i<3; i++)\n        {\n            if (i==1) tempScore = p1Score;\n            else { score+=\"-\"; tempScore = p2Score;}\n            switch(tempScore)\n            {\n                case 0:\n                    score+=\"Love\";\n                    break;\n                case 1:\n                    score+=\"Fifteen\";\n                    break;\n                case 2:\n                    score+=\"Thirty\";\n                    break;\n                case 3:\n                    score+=\"Forty\";\n                    break;\n            }\n        }\n    }\n    return score;\n    \n}\n\n#endif\n\n","tennis2.cpp":"#ifdef TENNIS_2\n\n#include <string>\n\nconst std::string tennis_score(int p1Score, int p2Score) {\n    std::string score = \"\";\n    std::string P1res = \"\";\n    std::string P2res = \"\";\n    if (p1Score == p2Score && p1Score < 4)\n    {\n        if (p1Score==0)\n            score = \"Love\";\n        if (p1Score==1)\n            score = \"Fifteen\";\n        if (p1Score==2)\n            score = \"Thirty\";\n        score += \"-All\";\n    }\n    if (p1Score==p2Score && p1Score>2)\n        score = \"Deuce\";\n    \n    if (p1Score > 0 && p2Score==0)\n    {\n        if (p1Score==1)\n            P1res = \"Fifteen\";\n        if (p1Score==2)\n            P1res = \"Thirty\";\n        if (p1Score==3)\n            P1res = \"Forty\";\n        \n        P2res = \"Love\";\n        score = P1res + \"-\" + P2res;\n    }\n    if (p2Score > 0 && p1Score==0)\n    {\n        if (p2Score==1)\n            P2res = \"Fifteen\";\n        if (p2Score==2)\n            P2res = \"Thirty\";\n        if (p2Score==3)\n            P2res = \"Forty\";\n        \n        P1res = \"Love\";\n        score = P1res + \"-\" + P2res;\n    }\n    \n    if (p1Score>p2Score && p1Score < 4)\n    {\n        if (p1Score==2)\n            P1res=\"Thirty\";\n        if (p1Score==3)\n            P1res=\"Forty\";\n        if (p2Score==1)\n            P2res=\"Fifteen\";\n        if (p2Score==2)\n            P2res=\"Thirty\";\n        score = P1res + \"-\" + P2res;\n    }\n    if (p2Score>p1Score && p2Score < 4)\n    {\n        if (p2Score==2)\n            P2res=\"Thirty\";\n        if (p2Score==3)\n            P2res=\"Forty\";\n        if (p1Score==1)\n            P1res=\"Fifteen\";\n        if (p1Score==2)\n            P1res=\"Thirty\";\n        score = P1res + \"-\" + P2res;\n    }\n    \n    if (p1Score > p2Score && p2Score >= 3)\n    {\n        score = \"Advantage player1\";\n    }\n    \n    if (p2Score > p1Score && p1Score >= 3)\n    {\n        score = \"Advantage player2\";\n    }\n    \n    if (p1Score>=4 && p2Score>=0 && (p1Score-p2Score)>=2)\n    {\n        score = \"Win for player1\";\n    }\n    if (p2Score>=4 && p1Score>=0 && (p2Score-p1Score)>=2)\n    {\n        score = \"Win for player2\";\n    }\n    return score;\n    \n}\n\n#endif\n","tennis3.cpp":"#ifdef TENNIS_3\n\n#include <string>\n\nconst std::string tennis_score(int p1, int p2) {\n    std::string s;\n    std::string p1N = \"player1\";\n    std::string p2N = \"player2\";\n    if ((p1 < 4 && p2 < 4) && (p1 + p2 < 6)) {\n        std::string p[4] = {\"Love\", \"Fifteen\", \"Thirty\", \"Forty\"}; \n        s = p[p1];\n        return (p1 == p2) ? s + \"-All\" : s + \"-\" + p[p2];\n    } else {\n        if (p1 == p2)\n            return \"Deuce\";\n        s = p1 > p2 ? p1N : p2N;\n        return ((p1-p2)*(p1-p2) == 1) ? \"Advantage \" + s : \"Win for \" + s;\n    }\n}\n\n#endif\n","output":"g++ -std=c++11 -Wall -Werror -O *.cpp -o run.tests\n./run.tests\n.................................\n33 tests passed\n"}}