{"created":[2012,12,8,4,52,25],"id":"00126EDF23","browser":"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:17.0) Gecko/20100101 Firefox/17.0","language":"Go","exercise":"Game_of_Life","unit_test_framework":"go_testing","tab_size":4,"visible_files":{"untitled.go":"package untitled\n\nfunc hhg() int {\n    return 42\n}\n","untitled_test.go":"package untitled\n\nimport (\"testing\")\n\nfunc Test_hhg(t *testing.T) {\n    if (hhg() != 54) {\n        t.Error(\"hhg() != 54 as expected.\")\n    }\n}\n","cyber-dojo.sh":"go test\n","output":"","instructions":"Your task is to write a program to calculate the next\ngeneration of Conway's game of life, given any starting\nposition. You start with a two dimensional grid of cells, \nwhere each cell is either alive or dead. The grid is finite, \nand no life can exist off the edges. When calculating the \nnext generation of the grid, follow these four rules:\n\n1. Any live cell with fewer than two live neighbours dies, \n   as if caused by underpopulation.\n2. Any live cell with more than three live neighbours dies, \n   as if by overcrowding.\n3. Any live cell with two or three live neighbours lives \n   on to the next generation.\n4. Any dead cell with exactly three live neighbours becomes \n   a live cell.\n\nExamples: * indicates live cell, . indicates dead cell\n\nExample input: (4 x 8 grid)\n4 8\n........\n....*...\n...**...\n........\n\nExample output:\n4 8\n........\n...**...\n...**...\n........\n"}}