{"created":[2014,7,30,16,11,7],"id":"0B339586CF","language":"Java-1.8_Mockito","exercise":"Poker_Hands","unit_test_framework":"junit","tab_size":4,"visible_files":{"HikerTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class HikerTest {\n\n    @Test\n    public void life_the_universe_and_everything() {\n        HikerHelper mock = mock(HikerHelper.class);\n        Hiker douglas = new Hiker(mock);\n        int expected = 42;\n        when(mock.multiplier()).thenReturn(9);\n        int actual = douglas.answer();\n        assertEquals(expected, actual);\n    }\n}\n","Hiker.java":"\npublic class Hiker {\n\n    public Hiker(HikerHelper helper) {\n        this.helper = helper;\n    }\n\n    public int answer() {\n        return 6 * helper.multiplier();\n    }\n\n    private HikerHelper helper;\n}\n","HikerHelper.java":"\npublic class HikerHelper {\n\n    public int multiplier() {\n        return 9;\n    }\n\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"","instructions":"A poker deck contains 52 cards - each card has a suit which\nis one of clubs, diamonds, hearts, or spades \n(denoted C, D, H, and S in the input data). \n\nEach card also has a value which is one of \n2, 3, 4, 5, 6, 7, 8, 9, 10, jack, queen, king, ace \n(denoted 2, 3, 4, 5, 6, 7, 8, 9, T, J, Q, K, A). \n\nFor scoring purposes, the suits are unordered while the\nvalues are ordered as given above, with 2 being the lowest\nand ace the highest value.\n\nA poker hand consists of 5 cards dealt from the deck. Poker\nhands are ranked by the following partial order from lowest\nto highest.\n\nHigh Card: Hands which do not fit any higher category are\nranked by the value of their highest card. If the highest\ncards have the same value, the hands are ranked by the next\nhighest, and so on.\n\nPair: 2 of the 5 cards in the hand have the same value. \nHands which both contain a pair are ranked by the value of\nthe cards forming the pair. If these values are the same, \nthe hands are ranked by the values of the cards not \nforming the pair, in decreasing order.\n\nTwo Pairs: The hand contains 2 different pairs. Hands \nwhich both contain 2 pairs are ranked by the value of \ntheir highest pair. Hands with the same highest pair \nare ranked by the value of their other pair. If these \nvalues are the same the hands are ranked by the value \nof the remaining card.\n\nThree of a Kind: Three of the cards in the hand have the \nsame value. Hands which both contain three of a kind are \nranked by the value of the 3 cards.\n\nStraight: Hand contains 5 cards with consecutive values. \nHands which both contain a straight are ranked by their \nhighest card.\n\nFlush: Hand contains 5 cards of the same suit. Hands which \nare both flushes are ranked using the rules for High Card.\n\nFull House: 3 cards of the same value, with the remaining 2\ncards forming a pair. Ranked by the value of the 3 cards.\n\nFour of a kind: 4 cards with the same value. Ranked by the\nvalue of the 4 cards.\n\nStraight flush: 5 cards of the same suit with consecutive\nvalues. Ranked by the highest card in the hand.\n\nYour job is to rank pairs of poker hands and to indicate\nwhich, if either, has a higher rank.\n\nExamples:\nInput: Black: 2H 3D 5S 9C KD White: 2C 3H 4S 8C AH\nOutput: White wins - high card: Ace \n\nInput: Black: 2H 4S 4C 2D 4H White: 2S 8S AS QS 3S\nOutput: Black wins - full house\n\nInput: Black: 2H 3D 5S 9C KD White: 2C 3H 4S 8C KH\nOutput: Black wins - high card: 9\n\nInput: Black: 2H 3D 5S 9C KD White: 2D 3H 5C 9S KH\nOutput: Tie\n"}}