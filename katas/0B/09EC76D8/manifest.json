{"created":[2014,3,10,8,33,1],"id":"0B09EC76D8","language":"C#","exercise":"Reversi","unit_test_framework":"nunit","tab_size":4,"visible_files":{"cyber-dojo.sh":"\ngmcs -t:library -r:nunit.framework.dll -out:RunTests.dll *.cs\nif [ $? -eq 0 ]; then\n  nunit-console -nologo RunTests.dll\nfi\n","output":"TennisGame1.cs(11,20): warning CS0414: The private field `Tennis.TennisGame1.player1Name' is assigned but its value is never used\nTennisGame1.cs(12,20): warning CS0414: The private field `Tennis.TennisGame1.player2Name' is assigned but its value is never used\nTennisGame2.cs(12,20): warning CS0414: The private field `Tennis.TennisGame2.player1Name' is assigned but its value is never used\nTennisGame2.cs(13,20): warning CS0414: The private field `Tennis.TennisGame2.player2Name' is assigned but its value is never used\nCompilation succeeded - 4 warning(s)\nProcessModel: Default    DomainUsage: Single\nExecution Runtime: Default\n......................................................................................................\nTests run: 102, Errors: 0, Failures: 0, Inconclusive: 0, Time: 0.369807 seconds\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\n\n","instructions":"In this cyber-dojo there are three classes which implement\nthe TennisGame interface. Each is a slightly different\nrefactoring challenge. The idea is to concentrate on one at\na time.\n\nStart by refactoring TennisGame1. \n\nTake small steps, run the tests often. You should not\nneed to change the test cases. If you get a series\nof compiler or test errors, consider reverting\nback to the latest green test run. (You can easily do this by \nclicking on the latest green traffic light at the top of\nthe page, and select \"revert\".)\n\nWhen you are happy with the design for TennisGame1, try refactoring\nthe other two versions, one at a time.\n\nWhich one was hardest? Which one got the best design in the end?\n\nSummary of tennis scoring:\n\n1. A game is won by the first player to have won at\n   least four points in total and at least two points\n   more than the opponent.\n   \n2. The running score of each game is described in a\n   manner peculiar to tennis: scores from zero to three\n   points are described as \"love\", \"fifteen\", \"thirty\",\n   and \"forty\" respectively.\n   \n3. If at least three points have been scored by each\n   player, and the scores are equal, the score is \"deuce\".\n   \n4. If at least three points have been scored by each\n   side and a player has one more point than his opponent,\n   the score of the game is \"advantage\" for the player\n   in the lead.\n\n[source http://en.wikipedia.org/wiki/Tennis#Scoring]","TennisTest.cs":"\nusing System;\nusing NUnit.Framework;\n\nnamespace Tennis\n{\n  [TestFixture(0, 0, \"Love-All\")]\n  [TestFixture( 1, 1, \"Fifteen-All\" )]\n  [TestFixture( 2, 2, \"Thirty-All\")]\n  [TestFixture( 3, 3, \"Forty-All\")]\n  [TestFixture( 4, 4, \"Deuce\")]\n  [TestFixture( 1, 0, \"Fifteen-Love\")]\n  [TestFixture( 0, 1, \"Love-Fifteen\")]\n  [TestFixture( 2, 0, \"Thirty-Love\")]\n  [TestFixture( 0, 2, \"Love-Thirty\")]\n  [TestFixture( 3, 0, \"Forty-Love\")]\n  [TestFixture( 0, 3, \"Love-Forty\")]\n  [TestFixture( 4, 0, \"Win for player1\")]\n  [TestFixture( 0, 4, \"Win for player2\")]\n  [TestFixture( 2, 1, \"Thirty-Fifteen\")]\n  [TestFixture( 1, 2, \"Fifteen-Thirty\")]\n  [TestFixture( 3, 1, \"Forty-Fifteen\")]\n  [TestFixture( 1, 3, \"Fifteen-Forty\")]\n  [TestFixture( 4, 1, \"Win for player1\")]\n  [TestFixture( 1, 4, \"Win for player2\")]\n  [TestFixture( 3, 2, \"Forty-Thirty\")]\n  [TestFixture( 2, 3, \"Thirty-Forty\")]\n  [TestFixture( 4, 2, \"Win for player1\")]\n  [TestFixture( 2, 4, \"Win for player2\")]\n  [TestFixture( 4, 3, \"Advantage player1\")]\n  [TestFixture( 3, 4, \"Advantage player2\")]\n  [TestFixture( 5, 4, \"Advantage player1\")]\n  [TestFixture( 4, 5, \"Advantage player2\")]\n  [TestFixture( 15, 14, \"Advantage player1\")]\n  [TestFixture( 14, 15, \"Advantage player2\")]\n  [TestFixture( 6, 4, \"Win for player1\")]\n  [TestFixture( 4, 6, \"Win for player2\")]\n  [TestFixture( 16, 14, \"Win for player1\")]\n  [TestFixture( 14, 16, \"Win for player2\")]\n  public class TennisTest\n  {\n    private int player1Score;\n    private int player2Score;\n    private string expectedScore;\n\n    public TennisTest(int player1Score, int player2Score, string expectedScore) : base()\n    {\n      this.player1Score = player1Score;\n      this.player2Score = player2Score;\n      this.expectedScore = expectedScore;\n    }\n\n    [Test]\n    public void checkTennisGame1() \n    {\n      TennisGame1 game = new TennisGame1(\"player1\", \"player2\");\n      checkAllScores(game);\n    }\n\n    [Test]\n    public void checkTennisGame2() \n    {\n      TennisGame2 game = new TennisGame2(\"player1\", \"player2\");\n      checkAllScores(game);\n    }\n\n    [Test]\n    public void checkTennisGame3() {\n      TennisGame3 game = new TennisGame3(\"player1\", \"player2\");\n      checkAllScores(game);\n    }\n\n    public void checkAllScores(TennisGame game) {\n      int highestScore = Math.Max(this.player1Score, this.player2Score);\n      for (int i = 0; i < highestScore; i++) {\n        if (i < this.player1Score)\n          game.WonPoint(\"player1\");\n        if (i < this.player2Score)\n          game.WonPoint(\"player2\");\n      }\n      Assert.AreEqual(this.expectedScore, game.GetScore());\n    }\n\n  }\n\n  [TestFixture]\n  public class ExampleGameTennisTest\n  {\n    public void RealisticTennisGame(TennisGame game)\n    {\n      String[] points =          {\"player1\", \"player1\", \"player2\", \"player2\", \"player1\", \"player1\"};\n      String[] expected_scores = {\"Fifteen-Love\", \"Thirty-Love\", \"Thirty-Fifteen\", \"Thirty-All\", \"Forty-Thirty\", \"Win for player1\"};\n      for (int i = 0; i < 6; i++) {\n        game.WonPoint(points[i]);\n        Assert.AreEqual(expected_scores[i], game.GetScore());\n      }\n    }\n    [Test]\n    public void CheckGame1()\n    {\n      TennisGame1 game = new TennisGame1(\"player1\", \"player2\");\n      RealisticTennisGame(game);\n    }\n    [Test]\n    public void CheckGame2()\n    {\n      TennisGame2 game = new TennisGame2(\"player1\", \"player2\");\n      RealisticTennisGame(game);\n    }\n    [Test]\n    public void CheckGame3()\n    {\n      TennisGame3 game = new TennisGame3(\"player1\", \"player2\");\n      RealisticTennisGame(game);\n    }\n  }\n\n}\n\n","TennisGame.cs":"using System;\n\nnamespace Tennis\n{\n  public interface TennisGame\n  {\n    void WonPoint (string playerName);\n    string GetScore ();\n\n  }\n}\n","TennisGame1.cs":"\nusing System;\nusing NUnit.Framework;\n\nnamespace Tennis\n{\n  class TennisGame1 : TennisGame\n  {\n    private int m_score1 = 0;\n    private int m_score2 = 0;\n    private string player1Name;\n    private string player2Name;\n\n    public TennisGame1 (string player1Name, string player2Name)\n    {\n      this.player1Name = player1Name;\n      this.player2Name = player2Name;\n    }\n\n    public void WonPoint (string playerName)\n    {\n      if (playerName == \"player1\")\n        m_score1 += 1;\n      else\n        m_score2 += 1;\n    }\n\n    public string GetScore ()\n    {\n      String score = \"\";\n      int tempScore=0;\n      if (m_score1==m_score2)\n      {\n        switch (m_score1)\n        {\n        case 0:\n          score = \"Love-All\";\n          break;\n        case 1:\n          score = \"Fifteen-All\";\n          break;\n        case 2:\n          score = \"Thirty-All\";\n          break;\n        case 3:\n          score = \"Forty-All\";\n          break;\n        default:\n          score = \"Deuce\";\n          break;\n          \n        }\n      }\n      else if (m_score1>=4 || m_score2>=4)\n      {\n        int minusResult = m_score1-m_score2;\n        if (minusResult==1) score =\"Advantage player1\";\n        else if (minusResult ==-1) score =\"Advantage player2\";\n        else if (minusResult>=2) score = \"Win for player1\";\n        else score =\"Win for player2\";\n      }\n      else\n      {\n        for (int i=1; i<3; i++)\n        {\n          if (i==1) tempScore = m_score1;\n          else { score+=\"-\"; tempScore = m_score2;}\n          switch(tempScore)\n          {\n          case 0:\n            score+=\"Love\";\n            break;\n          case 1:\n            score+=\"Fifteen\";\n            break;\n          case 2:\n            score+=\"Thirty\";\n            break;\n          case 3:\n            score+=\"Forty\";\n            break;\n          }\n        }\n      }\n      return score;\n    }\n  }\n\n}\n","TennisGame2.cs":"using System;\n\nnamespace Tennis\n{\n  public class TennisGame2 : TennisGame\n  {\n    public int P1point = 0;\n    public int P2point = 0;\n    \n    public string P1res = \"\";\n    public string P2res = \"\";\n    private string player1Name;\n    private string player2Name;\n\n    public TennisGame2 (string player1Name, string player2Name)\n    {\n      this.player1Name = player1Name;\n      this.player2Name = player2Name;\n    }\n\n    public string GetScore(){\n      string score = \"\";\n      if (P1point == P2point && P1point < 4)\n      {\n        if (P1point==0)\n          score = \"Love\";\n        if (P1point==1)\n          score = \"Fifteen\";\n        if (P1point==2)\n          score = \"Thirty\";\n        if (P1point==3)\n          score = \"Forty\";\n        score += \"-All\";\n      }\n      if (P1point==P2point && P1point>3)\n        score = \"Deuce\";\n      \n      if (P1point > 0 && P2point==0)\n      {\n        if (P1point==1)\n          P1res = \"Fifteen\";\n        if (P1point==2)\n          P1res = \"Thirty\";\n        if (P1point==3)\n          P1res = \"Forty\";\n        \n        P2res = \"Love\";\n        score = P1res + \"-\" + P2res;\n      }\n      if (P2point > 0 && P1point==0)\n      {\n        if (P2point==1)\n          P2res = \"Fifteen\";\n        if (P2point==2)\n          P2res = \"Thirty\";\n        if (P2point==3)\n          P2res = \"Forty\";\n        \n        P1res = \"Love\";\n        score = P1res + \"-\" + P2res;\n      }\n      \n      if (P1point>P2point && P1point < 4)\n      {\n        if (P1point==2)\n          P1res=\"Thirty\";\n        if (P1point==3)\n          P1res=\"Forty\";\n        if (P2point==1)\n          P2res=\"Fifteen\";\n        if (P2point==2)\n          P2res=\"Thirty\";\n        score = P1res + \"-\" + P2res;\n      }\n      if (P2point>P1point && P2point < 4)\n      {\n        if (P2point==2)\n          P2res=\"Thirty\";\n        if (P2point==3)\n          P2res=\"Forty\";\n        if (P1point==1)\n          P1res=\"Fifteen\";\n        if (P1point==2)\n          P1res=\"Thirty\";\n        score = P1res + \"-\" + P2res;\n      }\n      \n      if (P1point > P2point && P2point >= 3)\n      {\n        score = \"Advantage player1\";\n      }\n      \n      if (P2point > P1point && P1point >= 3)\n      {\n        score = \"Advantage player2\";\n      }\n      \n      if (P1point>=4 && P2point>=0 && (P1point-P2point)>=2)\n      {\n        score = \"Win for player1\";\n      }\n      if (P2point>=4 && P1point>=0 && (P2point-P1point)>=2)\n      {\n        score = \"Win for player2\";\n      }\n      return score;\n    }\n    \n    public void SetP1Score(int number){\n      \n      for (int i = 0; i < number; i++)\n      {\n        P1Score();\n      }\n      \n    }\n    \n    public void SetP2Score(int number){\n      \n      for (int i = 0; i < number; i++)\n      {\n        P2Score();\n      }\n      \n    }\n    \n    public void P1Score(){\n      P1point++;\n    }\n    \n    public void P2Score(){\n      P2point++;\n    }\n    \n    public void WonPoint(string player) {\n      if (player == \"player1\")\n        P1Score();\n      else\n        P2Score();\n    }\n\n  }\n}\n","TennisGame3.cs":"using System;\n\nnamespace Tennis\n{\n  public class TennisGame3 : TennisGame\n  {\n    private int p2;\n    private int p1;\n    private string p1N;\n    private string p2N;\n\n    public TennisGame3 (string player1Name, string player2Name)\n    {\n      this.p1N = player1Name;\n      this.p2N = player2Name;\n    }\n\n    public string GetScore() {\n      string s;\n      if (p1 < 4 && p2 < 4) {\n        string[] p = new String[]{\"Love\", \"Fifteen\", \"Thirty\", \"Forty\"}; \n        s = p[p1];\n        return (p1 == p2) ? s + \"-All\" : s + \"-\" + p[p2];\n      } else {\n        if (p1 == p2)\n          return \"Deuce\";\n        s = p1 > p2 ? p1N : p2N;\n        return ((p1-p2)*(p1-p2) == 1) ? \"Advantage \" + s : \"Win for \" + s;\n      }\n    }\n    \n    public void WonPoint(string playerName) {\n      if (playerName == \"player1\")\n        this.p1 += 1;\n      else\n        this.p2 += 1;\n    }\n\n  }\n}\n"}}