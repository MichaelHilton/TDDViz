{"created":[2014,7,7,6,11,56],"id":"0BEB4C3683","language":"Java-1.8_JUnit","exercise":"Verbal","unit_test_framework":"junit","tab_size":4,"visible_files":{"GildedRose.java":"class GildedRose {\n    Item[] items;\n\n    public GildedRose(Item[] items) {\n        this.items = items;\n    }\n\n    public void updateQuality() {\n        for (int i = 0; i < items.length; i++) {\n            //System.out.println(\"processing: \" + items[i]);\n            if (!items[i].name.equals(\"Aged Brie\")\n                    && !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                if (items[i].quality > 0) {\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].quality = items[i].quality - 1;\n                    }\n                }\n            } else {\n                if (items[i].quality < 50) {\n                    items[i].quality = items[i].quality + 1;\n\n                    if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].sellIn < 11) {\n                            if (items[i].quality < 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n\n                        if (items[i].sellIn < 6) {\n                            if (items[i].quality < 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                items[i].sellIn = items[i].sellIn - 1;\n            }\n\n            if (items[i].sellIn < 0) {\n                if (!items[i].name.equals(\"Aged Brie\")) {\n                    if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality > 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        items[i].quality = items[i].quality - items[i].quality;\n                    }\n                } else {\n                    if (items[i].quality < 50) {\n                        items[i].quality = items[i].quality + 1;\n                    }\n                }\n            }\n        }\n    }\n\n}\n","GildedRoseTest.java":"import static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class GildedRoseTest {\n\n    @Test\n    public void foo() {\n        Item[] items = new Item[] { new Item(\"foo\", 0, 0) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertEquals(\"fixme\", app.items[0].name);\n    }\n}\n","cyber-dojo.sh":"javac -cp .:./junit-4.11.jar *.java \nif [ $? -eq 0 ]; then\n  java -cp .:./junit-4.11.jar org.junit.runner.JUnitCore `ls -1 *Test*.class | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.E\nTime: 0.014\nThere was 1 failure:\n1) foo(GildedRoseTest)\norg.junit.ComparisonFailure: expected:<f[ixme]> but was:<f[oo]>\n\tat org.junit.Assert.assertEquals(Assert.java:124)\n\tat org.junit.Assert.assertEquals(Assert.java:146)\n\tat GildedRoseTest.foo(GildedRoseTest.java:12)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:616)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:269)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:151)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:130)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:111)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:92)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:47)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:38)\n\nFAILURES!!!\nTests run: 1,  Failures: 1\n\n","instructions":"======================================\nGilded Rose Requirements Specification\n======================================\n\nHi and welcome to team Gilded Rose. As you know, we are a small inn with \na prime location in a prominent city ran by a friendly innkeeper named \nAllison. We also buy and sell only the finest goods. Unfortunately, our \ngoods are constantly degrading in quality as they approach their sell by \ndate. We have a system in place that updates our inventory for us. It \nwas developed by a no-nonsense type named Leeroy, who has moved on to \nnew adventures. Your task is to add the new feature to our system so that\nwe can begin selling a new category of items. \n\nFirst an introduction to our system:\n\n\t- All items have a SellIn value which denotes the number of \n          days we have to sell the item\n\t- All items have a Quality value which denotes how valuable the \n          item is\n\t- At the end of each day our system lowers both values for every \n          item\n\nPretty simple, right? Well this is where it gets interesting:\n\n\t- Once the sell by date has passed, Quality degrades twice as fast\n\t- The Quality of an item is never negative\n\t- \"Aged Brie\" actually increases in Quality the older it gets\n\t- The Quality of an item is never more than 50\n\t- \"Sulfuras\", being a legendary item, never has to be sold or \n          decreases in Quality\n\t- \"Backstage passes\", like aged brie, increases in Quality as \n          it's SellIn value approaches; Quality increases by 2 when there\n          are 10 days or less and by 3 when there are 5 days or less but \n          Quality drops to 0 after the concert\n\nWe have recently signed a supplier of conjured items. This requires an \nupdate to our system:\n\n\t- \"Conjured\" items degrade in Quality twice as fast as normal \n          items\n\nFeel free to make any changes to the UpdateQuality method and add any new\ncode as long as everything still works correctly. However, do not alter \nthe Item class or Items property as those belong to the goblin in the \ncorner who will insta-rage and one-shot you as he doesn't believe in \nshared code ownership (you can make the UpdateQuality method and Items \nproperty static if you like, we'll cover for you). \n\nJust for clarification, an item can never have its Quality increase \nabove 50, however \"Sulfuras\" is a legendary item and as such its Quality \nis 80 and it never alters.","Item.java":"public class Item {\n\n    public String name;\n\n    public int sellIn;\n\n    public int quality;\n    \n    public Item(String name, int sellIn, int quality) {\n        this.name = name;\n        this.sellIn = sellIn;\n        this.quality = quality;\n    }\n    \n    public String toString() {\n        return this.name + \", \" + this.sellIn + \", \" + this.quality;\n    }\n}"}}