{"created":[2013,12,20,6,30,36],"id":"0BBA40FF88","browser":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36","language":"Python","exercise":"Roman_Numerals","unit_test_framework":"python_unittest","tab_size":4,"visible_files":{"untitled.py":"class Untitled:\n\n    def answer(self):\n        return 42\n\n","test_untitled.py":"import untitled\nimport unittest\n\nclass TestUntitled(unittest.TestCase):\n\n    def test_str(self):\n        '''simple example to start you off'''\n        obj = untitled.Untitled()\n        self.assertEqual(6 * 9, obj.answer())\n\n\nif __name__ == '__main__':\n    unittest.main()\n","cyber-dojo.sh":"python *test*.py\n","output":"","instructions":"Given a positive integer number (eg 42) determine\nits Roman numeral representation as a String (eg \"XLII\").\nThe Roman 'letters' are:\n\n1 ->    \"I\" | 10 ->    \"X\" | 100 ->    \"C\" | 1000 ->    \"M\"\n2 ->   \"II\" | 20 ->   \"XX\" | 200 ->   \"CC\" | 2000 ->   \"MM\"\n3 ->  \"III\" | 30 ->  \"XXX\" | 300 ->  \"CCC\" | 3000 ->  \"MMM\"\n4 ->   \"IV\" | 40 ->   \"XL\" | 400 ->   \"CD\" | 4000 -> \"MMMM\"\n5 ->    \"V\" | 50 ->    \"L\" | 500 ->    \"D\"\n6 ->   \"VI\" | 60 ->   \"LX\" | 600 ->   \"DC\" \n7 ->  \"VII\" | 70 ->  \"LXX\" | 700 ->  \"DCC\" \n8 -> \"VIII\" | 80 -> \"LXXX\" | 800 -> \"DCCC\" \n9 ->   \"IX\" | 90 ->   \"XC\" | 900 ->   \"CM\" \n\nYou cannot write numerals like IM for 999.\nWikipedia states \"Modern Roman numerals are written by\nexpressing each digit separately starting with the\nleftmost digit and skipping any digit with a value of zero.\"\n\nExamples:\no) 1990 -> \"MCMXC\"  (1000 -> \"M\"  + 900 -> \"CM\" + 90 -> \"XC\")\no) 2008 -> \"MMVIII\" (2000 -> \"MM\" +   8 -> \"VIII\")\no)   99 -> \"XCIX\"   (  90 -> \"XC\" +   9 -> \"IX\")\no)   47 -> \"XLVII\"  (  40 -> \"XL\" +   7 -> \"VII\")\n\n"}}