{"created":[2014,4,22,9,36,1],"id":"0B60BF5FF3","language":"Python-unittest","exercise":"Yahtzee","unit_test_framework":"python_unittest","tab_size":4,"visible_files":{"yahtzee.py":"class Yahtzee():\n\n    @staticmethod\n    def chance(d1, d2, d3, d4, d5):\n        total = 0\n        total += d1\n        total += d2\n        total += d3\n        total += d4\n        total += d5\n        return total\n\n    @staticmethod\n    def yahtzee(dice):\n        counts = [0]*(len(dice)+1)\n        for die in dice:\n            counts[die-1] += 1\n        for i in range(len(counts)):\n            if counts[i] == 5:\n                return 50\n        return 0\n    \n    @staticmethod\n    def ones( d1,  d2,  d3,  d4,  d5):\n        sum = 0\n        if (d1 == 1):\n            sum += 1\n        if (d2 == 1):\n            sum += 1\n        if (d3 == 1):\n            sum += 1\n        if (d4 == 1):\n            sum += 1\n        if (d5 == 1): \n            sum += 1\n\n        return sum\n    \n\n    @staticmethod\n    def twos( d1,  d2,  d3,  d4,  d5):\n        sum = 0\n        if (d1 == 2):\n             sum += 2\n        if (d2 == 2):\n             sum += 2\n        if (d3 == 2):\n             sum += 2\n        if (d4 == 2):\n             sum += 2\n        if (d5 == 2):\n             sum += 2\n        return sum\n    \n    @staticmethod\n    def threes( d1,  d2,  d3,  d4,  d5):\n        s = 0\n        if (d1 == 3):\n             s += 3\n        if (d2 == 3):\n             s += 3\n        if (d3 == 3):\n             s += 3\n        if (d4 == 3):\n             s += 3\n        if (d5 == 3):\n             s += 3\n        return s\n    \n\n    def __init__(self, d1, d2, d3, d4, _5):\n        self.dice = [0]*5\n        self.dice[0] = d1\n        self.dice[1] = d2\n        self.dice[2] = d3\n        self.dice[3] = d4\n        self.dice[4] = _5\n    \n    def fours(self):\n        sum = 0\n        for at in range(5):\n            if (self.dice[at] == 4): \n                sum += 4\n        return sum\n    \n\n    def fives(self):\n        s = 0\n        i = 0\n        for i in range(len(self.dice)): \n            if (self.dice[i] == 5):\n                s = s + 5\n        return s\n    \n\n    def sixes(self):\n        sum = 0\n        for at in range(len(self.dice)): \n            if (self.dice[at] == 6):\n                sum = sum + 6\n        return sum\n    \n    @staticmethod\n    def score_pair( d1,  d2,  d3,  d4,  d5):\n        counts = [0]*6\n        counts[d1-1] += 1\n        counts[d2-1] += 1\n        counts[d3-1] += 1\n        counts[d4-1] += 1\n        counts[d5-1] += 1\n        at = 0\n        for at in range(6):\n            if (counts[6-at-1] == 2):\n                return (6-at)*2\n        return 0\n    \n    @staticmethod\n    def two_pair( d1,  d2,  d3,  d4,  d5):\n        counts = [0]*6\n        counts[d1-1] += 1\n        counts[d2-1] += 1\n        counts[d3-1] += 1\n        counts[d4-1] += 1\n        counts[d5-1] += 1\n        n = 0\n        score = 0\n        for i in range(6):\n            if (counts[6-i-1] == 2):\n                n = n+1\n                score += (6-i)\n                    \n        if (n == 2):\n            return score * 2\n        else:\n            return 0\n    \n    @staticmethod\n    def four_of_a_kind( _1,  _2,  d3,  d4,  d5):\n        tallies = [0]*6\n        tallies[_1-1] += 1\n        tallies[_2-1] += 1\n        tallies[d3-1] += 1\n        tallies[d4-1] += 1\n        tallies[d5-1] += 1\n        for i in range(6):\n            if (tallies[i] == 4):\n                return (i+1) * 4\n        return 0\n    \n\n    @staticmethod\n    def three_of_a_kind( d1,  d2,  d3,  d4,  d5):\n        t = [0]*6\n        t[d1-1] += 1\n        t[d2-1] += 1\n        t[d3-1] += 1\n        t[d4-1] += 1\n        t[d5-1] += 1\n        for i in range(6):\n            if (t[i] == 3):\n                return (i+1) * 3\n        return 0\n    \n\n    @staticmethod\n    def smallStraight( d1,  d2,  d3,  d4,  d5):\n        tallies = [0]*6\n        tallies[d1-1] += 1\n        tallies[d2-1] += 1\n        tallies[d3-1] += 1\n        tallies[d4-1] += 1\n        tallies[d5-1] += 1\n        if (tallies[0] == 1 and\n            tallies[1] == 1 and\n            tallies[2] == 1 and\n            tallies[3] == 1 and\n            tallies[4] == 1):\n            return 15\n        return 0\n    \n\n    @staticmethod\n    def largeStraight( d1,  d2,  d3,  d4,  d5):\n        tallies = [0]*6\n        tallies[d1-1] += 1\n        tallies[d2-1] += 1\n        tallies[d3-1] += 1\n        tallies[d4-1] += 1\n        tallies[d5-1] += 1\n        if (tallies[1] == 1 and\n            tallies[2] == 1 and\n            tallies[3] == 1 and\n            tallies[4] == 1\n            and tallies[5] == 1):\n            return 20\n        return 0\n    \n\n    @staticmethod\n    def fullHouse( d1,  d2,  d3,  d4,  d5):\n        tallies = []\n        _2 = False\n        i = 0\n        _2_at = 0\n        _3 = False\n        _3_at = 0\n\n        tallies = [0]*6\n        tallies[d1-1] += 1\n        tallies[d2-1] += 1\n        tallies[d3-1] += 1\n        tallies[d4-1] += 1\n        tallies[d5-1] += 1\n\n        for i in range(6):\n            if (tallies[i] == 2): \n                _2 = True\n                _2_at = i+1\n            \n\n        for i in range(6):\n            if (tallies[i] == 3): \n                _3 = True\n                _3_at = i+1\n            \n\n        if (_2 and _3):\n            return _2_at * 2 + _3_at * 3\n        else:\n            return 0","test_yahtzee.py":"import yahtzee\nimport unittest\n\nclass TestYahtzee(unittest.TestCase):\n\n    def test_chance_scores_sum_of_all_dice(self):\n        expected = 15\n        actual = yahtzee.Yahtzee.chance(2,3,4,5,1)\n        assert expected == actual\n        self.assertEqual(16, yahtzee.Yahtzee.chance(3,3,4,5,1))\n  \n    def test_yahtzee_scores_50(self):\n        expected = 50\n        actual = yahtzee.Yahtzee.yahtzee([4,4,4,4,4])\n        assert expected == actual\n        assert 50 == yahtzee.Yahtzee.yahtzee([6,6,6,6,6])\n        assert 0 == yahtzee.Yahtzee.yahtzee([6,6,6,6,3])\n\n    def Test_1s(self):\n        assert yahtzee.Yahtzee.ones(1,2,3,4,5) == 1\n        assert 2 == yahtzee.Yahtzee.ones(1,2,1,4,5)\n        assert 0 == yahtzee.Yahtzee.ones(6,2,2,4,5)\n        assert 4 == yahtzee.Yahtzee.ones(1,2,1,1,1)\n    \n    def test_2s(self):\n        assert 4 == yahtzee.Yahtzee.twos(1,2,3,2,6)\n        assert 10 == yahtzee.Yahtzee.twos(2,2,2,2,2)\n\n    def test_threes(self):\n        assert 6 == yahtzee.Yahtzee.threes(1,2,3,2,3)\n        assert 12 == yahtzee.Yahtzee.threes(2,3,3,3,3)\n  \n    def test_fours_test(self):\n        assert 12 == yahtzee.Yahtzee(4,4,4,5,5).fours()\n        assert 8 == yahtzee.Yahtzee(4,4,5,5,5).fours()\n        assert 4 == yahtzee.Yahtzee(4,5,5,5,5).fours()\n\n    def test_fives(self):\n        assert 10 == yahtzee.Yahtzee(4,4,4,5,5).fives()\n        assert 15 == yahtzee.Yahtzee(4,4,5,5,5).fives()\n        assert 20 == yahtzee.Yahtzee(4,5,5,5,5).fives()\n\n    def test_sixes_test(self):\n        assert 0 == yahtzee.Yahtzee(4,4,4,5,5).sixes()\n        assert 6 == yahtzee.Yahtzee(4,4,6,5,5).sixes()\n        assert 18 == yahtzee.Yahtzee(6,5,6,6,5).sixes()\n\n    def test_one_pair(self):\n        assert 6 == yahtzee.Yahtzee.score_pair(3,4,3,5,6)\n        assert 10 == yahtzee.Yahtzee.score_pair(5,3,3,3,5)\n        assert 12 == yahtzee.Yahtzee.score_pair(5,3,6,6,5)\n  \n\n    def test_two_Pair(self):\n        assert 16 == yahtzee.Yahtzee.two_pair(3,3,5,4,5)\n        assert 0 == yahtzee.Yahtzee.two_pair(3,3,5,5,5)\n  \n\n    def test_three_of_a_kind(self):\n        assert 9 == yahtzee.Yahtzee.three_of_a_kind(3,3,3,4,5)\n        assert 15 == yahtzee.Yahtzee.three_of_a_kind(5,3,5,4,5)\n        assert 0 == yahtzee.Yahtzee.three_of_a_kind(3,3,3,3,5)\n\n    def test_four_of_a_knd(self):\n        assert 12 == yahtzee.Yahtzee.four_of_a_kind(3,3,3,3,5)\n        assert 20 == yahtzee.Yahtzee.four_of_a_kind(5,5,5,4,5)\n        assert 0 == yahtzee.Yahtzee.three_of_a_kind(3,3,3,3,3)\n  \n\n    def test_smallStraight(self):\n        assert 15 == yahtzee.Yahtzee.smallStraight(1,2,3,4,5)\n        assert 15 == yahtzee.Yahtzee.smallStraight(2,3,4,5,1)\n        assert 0 == yahtzee.Yahtzee.smallStraight(1,2,2,4,5)\n  \n    def test_largeStraight(self):\n        assert 20 == yahtzee.Yahtzee.largeStraight(6,2,3,4,5)\n        assert 20 == yahtzee.Yahtzee.largeStraight(2,3,4,5,6)\n        assert 0 == yahtzee.Yahtzee.largeStraight(1,2,2,4,5)\n  \n\n\n    def test_fullHouse(self):\n        assert 18 == yahtzee.Yahtzee.fullHouse(6,2,2,2,6)\n        assert 0 == yahtzee.Yahtzee.fullHouse(2,3,4,5,6)\n   \n\nif __name__ == '__main__':\n    unittest.main()","cyber-dojo.sh":"python *test*.py\n","output":"..............\n----------------------------------------------------------------------\nRan 14 tests in 0.001s\n\nOK\n","instructions":"The game of yahtzee is a simple dice game. Each player\nrolls five six-sided dice. They can re-roll some or all\nof the dice up to three times (including the original roll).\n\nFor example, suppose a players rolls\n    3,4,5,5,2\nThey hold (-,-,5,5,-) and re-roll (3,4,-,-,2)\n    5,1,5,5,3\nThey hold (5,-,5,5,-) and re-roll (-,1,-,-,3)\n    5,6,5,5,2\n\nThe player then places the roll in a category, such as ones,\ntwos, fives, pair, two pairs etc (see below). If the roll is\ncompatible with the category, the player gets a score for the\nroll according to the rules. If the roll is not compatible\nwith the category, the player scores zero for the roll.\n\nFor example, suppose a player scores 5,6,5,5,2 in the fives\ncategory they would score 15 (three fives). The score for\nthat go is then added to their total and the category cannot\nbe used again in the remaining goes for that game. \nA full game consists of one go for each category. Thus, for\ntheir last go in a game, a player must choose their only\nremaining category.\n\nYour task is to score a GIVEN roll in a GIVEN category.\nYou do NOT have to program the random dice rolling.\nThe game is NOT played by letting the computer choose the\nhighest scoring category for a given roll.\n  \n\nYahzee Categories and Scoring Rules\n===================================\n\nChance: \n  The player scores the sum of all dice,\n  no matter what they read.\n  For example,\n   1,1,3,3,6 placed on \"chance\" scores 14 (1+1+3+3+6)\n   4,5,5,6,1 placed on \"chance\" scores 21 (4+5+5+6+1)  \n\nYahtzee: \n  If all dice have the same number,\n  the player scores 50 points. \n  For example,\n   1,1,1,1,1 placed on \"yahtzee\" scores 50\n   1,1,1,2,1 placed on \"yahtzee\" scores 0\n\nOnes, Twos, Threes, Fours, Fives, Sixes: \n  The player scores the sum of the dice that reads one, \n  two, three, four, five or six, respectively. \n  For example,  \n   1,1,2,4,4 placed on \"fours\" scores 8 (4+4)\n   2,3,2,5,1 placed on \"twos\" scores 4  (2+2)\n   3,3,3,4,5 placed on \"ones\" scores 0\n\nPair: \n  The player scores the sum of the two highest matching dice.\n  For example, when placed on \"pair\" \n   3,3,3,4,4 scores 8 (4+4)\n   1,1,6,2,6 scores 12 (6+6)\n   3,3,3,4,1 scores 0\n   3,3,3,3,1 scores 0\n\nTwo pairs: \n  If there are two pairs of dice with the same number, the\n  player scores the sum of these dice. \n  For example, when placed on \"two pairs\"\n   1,1,2,3,3 scores 8 (1+1+3+3)\n   1,1,2,3,4 scores 0\n   1,1,2,2,2 scores 0\n\nThree of a kind: \n  If there are three dice with the same number, the player\n  scores the sum of these dice. \n  For example, when placed on \"three of a kind\"  \n    3,3,3,4,5 scores 9 (3+3+3)\n    3,3,4,5,6 scores 0\n    3,3,3,3,1 scores 0\n\nFour of a kind: \n  If there are four dice with the same number, the player\n  scores the sum of these dice. \n  For example, when placed on \"four of a kind\"  \n    2,2,2,2,5 scores 8 (2+2+2+2)\n    2,2,2,5,5 scores 0\n    2,2,2,2,2 scores 0\n\nSmall straight: \n  When placed on \"small straight\", if the dice read \n  1,2,3,4,5, the player scores 15 (the sum of all the dice.\n\nLarge straight: \n  When placed on \"large straight\", if the dice read \n  2,3,4,5,6, the player scores 20 (the sum of all the dice).\n\nFull house: \n  If the dice are two of a kind and three of a kind, the\n  player scores the sum of all the dice. \n  For example, when placed on \"full house\"  \n    1,1,2,2,2 scores 8 (1+1+2+2+2) \n    2,2,3,3,4 scores 0\n    4,4,4,4,4 scores 0\n\n  \n"}}