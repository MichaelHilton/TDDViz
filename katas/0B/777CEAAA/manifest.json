{"created":[2014,3,3,22,56,36],"id":"0B777CEAAA","language":"Ruby","exercise":"Tennis","unit_test_framework":"ruby_test_unit","tab_size":2,"visible_files":{"cyber-dojo.sh":"ruby *test*.rb\n\n","instructions":"Tennis has a rather quirky scoring system, and to newcomers it \ncan be a little difficult to keep track of. The local tennis club\nhas some code that is currently being used to update the scoreboard\nwhen a player scores a point. They has recently acquired two smaller\ntennis clubs, and they two each have a similar piece of code.\n \nYou have just been employed by the tennis club, and your job \nis to refactor all three codebases until you are happy to\nwork with any of them. The future is uncertain, new features may\nbe needed, and you want to be thoroughly on top of your game when\nthat happens.\n \nSummary of Tennis scoring:\n1. A game is won by the first player to have won at least four points \n   in total and at least two points more than the opponent.\n2. The running score of each game is described in a manner peculiar \n   to tennis: scores from zero to three points are described as “love”, \n   “fifteen”, “thirty”, and “forty” respectively.\n3. If at least three points have been scored by each player, and the \n   scores are equal, the score is “deuce”.\n4. If at least three points have been scored by each side and a player\n   has one more point than his opponent, the score of the game is\n   “advantage” for the player in the lead.","tennis_test.rb":"require File.join(File.dirname(__FILE__), 'tennis')\n#require_relative(\"tennis\")\nrequire 'test/unit'\n\nTEST_CASES = [\n   [0, 0, \"Love-All\", 'player1', 'player2'],\n   [1, 1, \"Fifteen-All\", 'player1', 'player2'],\n   [2, 2, \"Thirty-All\", 'player1', 'player2'],\n   [3, 3, \"Deuce\", 'player1', 'player2'],\n   [4, 4, \"Deuce\", 'player1', 'player2'],\n   \n   [1, 0, \"Fifteen-Love\", 'player1', 'player2'],\n   [0, 1, \"Love-Fifteen\", 'player1', 'player2'],\n   [2, 0, \"Thirty-Love\", 'player1', 'player2'],\n   [0, 2, \"Love-Thirty\", 'player1', 'player2'],\n   [3, 0, \"Forty-Love\", 'player1', 'player2'],\n   [0, 3, \"Love-Forty\", 'player1', 'player2'],\n   [4, 0, \"Win for player1\", 'player1', 'player2'],\n   [0, 4, \"Win for player2\", 'player1', 'player2'],\n   \n   [2, 1, \"Thirty-Fifteen\", 'player1', 'player2'],\n   [1, 2, \"Fifteen-Thirty\", 'player1', 'player2'],\n   [3, 1, \"Forty-Fifteen\", 'player1', 'player2'],\n   [1, 3, \"Fifteen-Forty\", 'player1', 'player2'],\n   [4, 1, \"Win for player1\", 'player1', 'player2'],\n   [1, 4, \"Win for player2\", 'player1', 'player2'],\n   \n   [3, 2, \"Forty-Thirty\", 'player1', 'player2'],\n   [2, 3, \"Thirty-Forty\", 'player1', 'player2'],\n   [4, 2, \"Win for player1\", 'player1', 'player2'],\n   [2, 4, \"Win for player2\", 'player1', 'player2'],\n   \n   [4, 3, \"Advantage player1\", 'player1', 'player2'],\n   [3, 4, \"Advantage player2\", 'player1', 'player2'],\n   [5, 4, \"Advantage player1\", 'player1', 'player2'],\n   [4, 5, \"Advantage player2\", 'player1', 'player2'],\n   [15, 14, \"Advantage player1\", 'player1', 'player2'],\n   [14, 15, \"Advantage player2\", 'player1', 'player2'],\n   \n   [6, 4, 'Win for player1', 'player1', 'player2'], \n   [4, 6, 'Win for player2', 'player1', 'player2'], \n   [16, 14, 'Win for player1', 'player1', 'player2'], \n   [14, 16, 'Win for player2', 'player1', 'player2'], \n\n   [6, 4, 'Win for One', 'One', 'player2'],\n   [4, 6, 'Win for Two', 'player1', 'Two'], \n   [6, 5, 'Advantage One', 'One', 'player2'],\n   [5, 6, 'Advantage Two', 'player1', 'Two'] \n]\n\nclass TestTennis < Test::Unit::TestCase\n  def play_game(tennisGameClass, p1Points, p2Points, p1Name, p2Name)\n    game = tennisGameClass.new(p1Name, p2Name)\n    (0..[p1Points, p2Points].max).each do |i|\n      if i < p1Points\n        game.won_point(p1Name)\n      end\n      if i < p2Points\n        game.won_point(p2Name)\n      end\n    end\n    game\n  end\n\n  def test_Score_Game1\n    TEST_CASES.each do |testcase|\n      (p1Points, p2Points, score, p1Name, p2Name) = testcase\n      game = play_game(TennisGame1, p1Points, p2Points, p1Name, p2Name)\n      assert_equal(score, game.score())\n    end\n  end\n  def test_Score_Game2\n    TEST_CASES.each do |testcase|\n      (p1Points, p2Points, score, p1Name, p2Name) = testcase\n      game = play_game(TennisGame2, p1Points, p2Points, p1Name, p2Name)\n      assert_equal(score, game.score())\n    end\n  end\n  def test_Score_Game3\n    TEST_CASES.each do |testcase|\n      (p1Points, p2Points, score, p1Name, p2Name) = testcase\n      game = play_game(TennisGame3, p1Points, p2Points, p1Name, p2Name)\n      assert_equal(score, game.score())\n    end\n  end\nend\n","tennis.rb":"\nclass TennisGame1\n\n  def initialize(player1Name, player2Name)\n    @player1Name = player1Name\n    @player2Name = player2Name\n    @p1points = 0\n    @p2points = 0\n  end\n        \n  def won_point(playerName)\n    if playerName == @player1Name\n      @p1points += 1\n    else\n      @p2points += 1\n    end\n  end\n  \n  def score\n    result = \"\"\n    tempScore=0\n    if (@p1points==@p2points)\n      result = {\n          0 => \"Love-All\",\n          1 => \"Fifteen-All\",\n          2 => \"Thirty-All\",\n      }.fetch(@p1points, \"Deuce\")\n    elsif (@p1points>=4 or @p2points>=4)\n      minusResult = @p1points-@p2points\n      if (minusResult==1)\n        result =\"Advantage \" + @player1Name\n      elsif (minusResult ==-1)\n        result =\"Advantage \" + @player2Name\n      elsif (minusResult>=2)\n        result = \"Win for \" + @player1Name\n      else\n        result =\"Win for \" + @player2Name\n      end\n    else\n      (1...3).each do |i|\n        if (i==1)\n          tempScore = @p1points\n        else\n          result+=\"-\"\n          tempScore = @p2points\n        end\n        result += {\n            0 => \"Love\",\n            1 => \"Fifteen\",\n            2 => \"Thirty\",\n            3 => \"Forty\",\n        }[tempScore]\n      end\n    end\n    result\n  end\nend\n\nclass TennisGame2\n  def initialize(player1Name, player2Name)\n    @player1Name = player1Name\n    @player2Name = player2Name\n    @p1points = 0\n    @p2points = 0\n  end\n      \n  def won_point(playerName)\n    if playerName == @player1Name\n      p1Score()\n    else\n      p2Score()\n    end\n  end\n\n  def score\n    result = \"\"\n    if (@p1points == @p2points and @p1points < 3)\n      if (@p1points==0)\n        result = \"Love\"\n      end\n      if (@p1points==1)\n        result = \"Fifteen\"\n      end\n      if (@p1points==2)\n        result = \"Thirty\"\n      end\n      result += \"-All\"\n    end\n    if (@p1points==@p2points and @p1points>2)\n        result = \"Deuce\"\n    end\n    \n    p1res = \"\"\n    p2res = \"\"\n    if (@p1points > 0 and @p2points==0)\n      if (@p1points==1)\n        p1res = \"Fifteen\"\n      end\n      if (@p1points==2)\n        p1res = \"Thirty\"\n      end\n      if (@p1points==3)\n        p1res = \"Forty\"\n      end\n      p2res = \"Love\"\n      result = p1res + \"-\" + p2res\n    end\n    if (@p2points > 0 and @p1points==0)\n      if (@p2points==1)\n        p2res = \"Fifteen\"\n      end\n      if (@p2points==2)\n        p2res = \"Thirty\"\n      end\n      if (@p2points==3)\n        p2res = \"Forty\"\n      end\n      \n      p1res = \"Love\"\n      result = p1res + \"-\" + p2res\n    end\n    \n    if (@p1points>@p2points and @p1points < 4)\n      if (@p1points==2)\n        p1res=\"Thirty\"\n      end\n      if (@p1points==3)\n        p1res=\"Forty\"\n      end\n      if (@p2points==1)\n        p2res=\"Fifteen\"\n      end\n      if (@p2points==2)\n        p2res=\"Thirty\"\n      end\n      result = p1res + \"-\" + p2res\n    end\n    if (@p2points>@p1points and @p2points < 4)\n      if (@p2points==2)\n        p2res=\"Thirty\"\n      end\n      if (@p2points==3)\n        p2res=\"Forty\"\n      end\n      if (@p1points==1)\n        p1res=\"Fifteen\"\n      end\n      if (@p1points==2)\n        p1res=\"Thirty\"\n      end\n      result = p1res + \"-\" + p2res\n    end\n    if (@p1points > @p2points and @p2points >= 3)\n      result = \"Advantage \" + @player1Name\n    end\n    if (@p2points > @p1points and @p1points >= 3)\n      result = \"Advantage \" + @player2Name\n    end\n    if (@p1points>=4 and @p2points>=0 and (@p1points-@p2points)>=2)\n      result = \"Win for \" + @player1Name\n    end\n    if (@p2points>=4 and @p1points>=0 and (@p2points-@p1points)>=2)\n      result = \"Win for \" + @player2Name\n    end\n    result\n  end\n\n  def setp1Score(number)\n    (0..number).each do |i|\n        p1Score()\n    end\n  end\n\n  def setp2Score(number)\n    (0..number).each do |i|\n      p2Score()\n    end\n  end\n\n  def p1Score\n    @p1points +=1\n  end\n  \n  def p2Score\n    @p2points +=1\n  end\nend\n\nclass TennisGame3\n  def initialize(player1Name, player2Name)\n    @p1N = player1Name\n    @p2N = player2Name\n    @p1 = 0\n    @p2 = 0\n  end\n      \n  def won_point(n)\n    if n == @p1N\n        @p1 += 1\n    else\n        @p2 += 1\n    end\n  end\n  \n  def score\n    if (@p1 < 4 and @p2 < 4) and (@p1 + @p2 < 6)\n      p = [\"Love\", \"Fifteen\", \"Thirty\", \"Forty\"]\n      s = p[@p1]\n      @p1 == @p2 ? s + \"-All\" : s + \"-\" + p[@p2]\n    else\n      if (@p1 == @p2)\n        \"Deuce\"\n      else\n        s = @p1 > @p2 ? @p1N : @p2N\n        (@p1-@p2)*(@p1-@p2) == 1 ? \"Advantage \" + s : \"Win for \" + s\n      end\n    end\n  end\nend\n","output":"Run options: \n\n# Running tests:\n\n...\n\nFinished tests in 0.001514s, 1981.2547 tests/s, 73306.4235 assertions/s.\n\n3 tests, 111 assertions, 0 failures, 0 errors, 0 skips\n"}}