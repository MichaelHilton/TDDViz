{"created":[2014,5,28,23,6,50],"id":"0B95856D07","language":"Java-1.8_JUnit","exercise":"Zeckendorf_Number","unit_test_framework":"junit","tab_size":4,"visible_files":{"Untitled.java":"\npublic class Untitled {\n    \n    public static int answer() {\n        return 42;\n    }\n}\n","UntitledTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class UntitledTest {\n    \n    @Test\n    public void hitch_hiker() {\n        int expected = 6 * 9;\n        int actual = Untitled.answer();\n        assertEquals(expected, actual);\n    }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"","instructions":"Just as numbers can be represented in a positional\nnotation as sums of multiples of the powers of ten\n(decimal) or two (binary); all the positive integers\ncan be represented as the sum of one or zero times\nthe distinct members of the Fibonacci series.\n\nRecall that the first six distinct Fibonacci numbers\nare: 1, 2, 3, 5, 8, 13.\nThe decimal number eleven can be written as\n\n  0*13 + 1*8 + 0*5 + 1*3 + 0*2 + 0*1\n  \nor 010100 in positional notation where the columns\nrepresent multiplication by a particular member of the\nsequence. Leading zeroes are dropped so that eleven\ndecimal becomes 10100.\n\n10100 is not the only way to make eleven from the\nFibonacci numbers however;\n\n  0*13 + 1*8 + 0*5 + 0*3 + 1*2 + 1*1\n  \nor 010011 would also represent decimal 11. For a true\nZeckendorf number there is the added restriction that\nno two consecutive Fibonacci numbers can be used which\nleads to the former unique solution.\n\nYour task is to generate and show here a table of the\nZeckendorf number representations of the decimal numbers\nzero to twenty, in order.\n\n[Source http://rosettacode.org]"}}