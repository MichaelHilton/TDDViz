{"created":[2014,4,28,21,23,59],"id":"0BA26EB48B","language":"Java-JUnit","exercise":"Roman_Numerals","unit_test_framework":"junit","tab_size":4,"visible_files":{"Untitled.java":"\npublic class Untitled {\n    \n    public static int answer() {\n        return 42;\n    }\n}\n","UntitledTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class UntitledTest {\n    \n    @Test\n    public void hitch_hiker() {\n        int expected = 6 * 9;\n        int actual = Untitled.answer();\n        assertEquals(expected, actual);\n    }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"","instructions":"Given a positive integer number (eg 42) determine\nits Roman numeral representation as a String (eg \"XLII\").\n\nYou cannot write numerals like IM for 999.\nWikipedia states \"Modern Roman numerals are written by\nexpressing each digit separately starting with the\nleftmost digit and skipping any digit with a value of zero.\"\n\nExamples:\n\n1 ->    \"I\" | 10 ->    \"X\" | 100 ->    \"C\" | 1000 ->    \"M\"\n2 ->   \"II\" | 20 ->   \"XX\" | 200 ->   \"CC\" | 2000 ->   \"MM\"\n3 ->  \"III\" | 30 ->  \"XXX\" | 300 ->  \"CCC\" | 3000 ->  \"MMM\"\n4 ->   \"IV\" | 40 ->   \"XL\" | 400 ->   \"CD\" | 4000 -> \"MMMM\"\n5 ->    \"V\" | 50 ->    \"L\" | 500 ->    \"D\" |\n6 ->   \"VI\" | 60 ->   \"LX\" | 600 ->   \"DC\" |\n7 ->  \"VII\" | 70 ->  \"LXX\" | 700 ->  \"DCC\" |\n8 -> \"VIII\" | 80 -> \"LXXX\" | 800 -> \"DCCC\" |\n9 ->   \"IX\" | 90 ->   \"XC\" | 900 ->   \"CM\" |\n\n1990 -> \"MCMXC\"  (1000 -> \"M\"  + 900 -> \"CM\" + 90 -> \"XC\")\n2008 -> \"MMVIII\" (2000 -> \"MM\" + 8 -> \"VIII\")\n  99 -> \"XCIX\"   (90 -> \"XC\" + 9 -> \"IX\")\n  47 -> \"XLVII\"  (40 -> \"XL\" + 7 -> \"VII\")\n\n"}}