{"created":[2014,5,6,9,16,57],"id":"0A5D341B99","language":"C++-assert","exercise":"Yahtzee","unit_test_framework":"cassert","tab_size":4,"visible_files":{"yahtzee.cpp":"#include \"yahtzee.hpp\"\n#include <string.h>\n\nint Yahtzee::Chance(int d1, int d2, int d3, int d4, int d5)\n{\n    int total = 0;\n    total += d1;\n    total += d2;\n    total += d3;\n    total += d4;\n    total += d5;\n    return total;\n}\n\n\nint Yahtzee::yahtzee(int dice[])\n{\n    int counts[6] = {0,0,0,0,0,0};\n    for (int i = 0; i != 5; i++)\n        counts[dice[i]-1]++;\n    for (int i = 0; i != 6; i++)\n        if (counts[i] == 5)\n            return 50;\n    return 0;\n}\n\nint Yahtzee::Ones(int d1, int d2, int d3, int d4, int d5) {\n    int sum = 0;\n    if (d1 == 1) sum++;\n    if (d2 == 1) sum++;\n    if (d3 == 1) sum++;\n    if (d4 == 1) sum++;\n    if (d5 == 1) \n        sum++;\n\n    return sum;\n}\n\nint Yahtzee::Twos(int d1, int d2, int d3, int d4, int d5) {\n    int sum = 0;\n    if (d1 == 2) sum += 2;\n    if (d2 == 2) sum += 2;\n    if (d3 == 2) sum += 2;\n    if (d4 == 2) sum += 2;\n    if (d5 == 2) sum += 2;\n    return sum;\n}\n\n\nint Yahtzee::Threes(int d1, int d2, int d3, int d4, int d5) {\n    int s;    \n    s = 0;\n    if (d1 == 3) s += 3;\n    if (d2 == 3) s += 3;\n    if (d3 == 3) s += 3;\n    if (d4 == 3) s += 3;\n    if (d5 == 3) s += 3;\n    return s;\n}\n\nYahtzee::Yahtzee()\n{\n}\n\nYahtzee::Yahtzee(int d1, int d2, int d3, int d4, int _5)\n{\n    dice = new int[5];\n    dice[0] = d1;\n    dice[1] = d2;\n    dice[2] = d3;\n    dice[3] = d4;\n    dice[4] = _5;\n}\n\nint Yahtzee::Fours()\n{\n    int sum;    \n    sum = 0;\n    for (int at = 0; at != 5; at++) {\n        if (dice[at] == 4) {\n            sum += 4;\n        }\n    }\n    return sum;\n}\n\n\nint Yahtzee::Fives()\n{\n    int s = 0;\n    int i;\n    for (i = 0; i < 5; i++) \n        if (dice[i] == 5)\n            s = s + 5;\n    return s;\n}\n\nint Yahtzee::sixes()\n{\n    int sum = 0;\n    for (int at = 0; at < 5; at++) \n        if (dice[at] == 6)\n            sum = sum + 6;\n    return sum;\n}\n\nint Yahtzee::ScorePair(int d1, int d2, int d3, int d4, int d5)\n{\n    int counts[6] = {0,0,0,0,0,0};\n    counts[d1-1]++;\n    counts[d2-1]++;\n    counts[d3-1]++;\n    counts[d4-1]++;\n    counts[d5-1]++;\n    int at;\n    for (at = 0; at != 6; at++)\n        if (counts[6-at-1] == 2)\n            return (6-at)*2;\n    return 0;\n}\n\nint Yahtzee::TwoPair(int d1, int d2, int d3, int d4, int d5)\n{\n    int counts[6] = {0};\n    counts[d1-1]++;\n    counts[d2-1]++;\n    counts[d3-1]++;\n    counts[d4-1]++;\n    counts[d5-1]++;\n    int n = 0;\n    int score = 0;\n    for (int i = 0; i < 6; i += 1)\n        if (counts[6-i-1] == 2) {\n            n++;\n            score += (6-i);\n        }        \n    if (n == 2)\n        return score * 2;\n    else\n        return 0;\n}\n\nint Yahtzee::FourOfAKind(int _1, int _2, int d3, int d4, int d5)\n{\n    int * tallies;\n    tallies = new int[6];\n    tallies[0] = tallies[1] = tallies[2] = 0;\n    tallies[3] = tallies[4] = tallies[5] = 0;\n    tallies[_1-1]++;\n    tallies[_2-1]++;\n    tallies[d3-1]++;\n    tallies[d4-1]++;\n    tallies[d5-1]++;\n    for (int i = 0; i < 6; i++)\n        if (tallies[i] == 4)\n            return (i+1) * 4;\n    return 0;\n}\n\nint Yahtzee::ThreeOfAKind(int d1, int d2, int d3, int d4, int d5)\n{\n    int * t;\n    t = new int[6];\n    t[0] = t[1] = t[2] = 0;\n    t[3] = t[4] = t[5] = 0;\n    t[d1-1]++;\n    t[d2-1]++;\n    t[d3-1]++;\n    t[d4-1]++;\n    t[d5-1]++;\n    for (int i = 0; i < 6; i++)\n        if (t[i] == 3)\n            return (i+1) * 3;\n    return 0;\n}\n\n\nint Yahtzee::SmallStraight(int d1, int d2, int d3, int d4, int d5)\n{\n    int* tallies =new int[6];\n    memset(tallies, 0, sizeof(int)*6);\n    tallies[d1-1] += 1;\n    tallies[d2-1] += 1;\n    tallies[d3-1] += 1;\n    tallies[d4-1] += 1;\n    tallies[d5-1] += 1;\n    if (tallies[0] == 1 &&\n        tallies[1] == 1 &&\n        tallies[2] == 1 &&\n        tallies[3] == 1 &&\n        tallies[4] == 1)\n        return 15;\n    return 0;\n}\n\nint Yahtzee::LargeStraight(int d1, int d2, int d3, int d4, int d5)\n{\n    int* tallies = new int[6];\n    memset(tallies, 0, sizeof(*tallies)*6);\n    tallies[d1-1] += 1;\n    tallies[d2-1] += 1;\n    tallies[d3-1] += 1;\n    tallies[d4-1] += 1;\n    tallies[d5-1] += 1;\n    if (tallies[1] == 1 &&\n        tallies[2] == 1 &&\n        tallies[3] == 1 &&\n        tallies[4] == 1\n        && tallies[5] == 1)\n        return 20;\n    return 0;\n}\n\n\nint Yahtzee::FullHouse(int d1, int d2, int d3, int d4, int d5)\n{\n    int* tallies;\n    bool _2 = false;\n    int i;\n    int _2_at = 0;\n    bool _3 = false;\n    int _3_at = 0;\n\n\n\n\n    tallies = new int[6];\n    memset(tallies, 0, sizeof(int)*6);\n    tallies[d1-1] += 1;\n    tallies[d2-1] += 1;\n    tallies[d3-1] += 1;\n    tallies[d4-1] += 1;\n    tallies[d5-1] += 1;\n\n    for (i = 0; i != 6; i += 1)\n        if (tallies[i] == 2) {\n            _2 = true;\n            _2_at = i+1;\n        }\n\n    for (i = 0; i != 6; i += 1)\n        if (tallies[i] == 3) {\n            _3 = true;\n            _3_at = i+1;\n        }\n\n    if (_2 && _3)\n        return _2_at * 2 + _3_at * 3;\n    else\n        return 0;\n}\n","yahtzee.tests.cpp":"#include \"yahtzee.hpp\"\n#include <cassert>\n#include <iostream>\n\nstatic void Chance_scores_sum_of_all_dice(void)\n{\n    int expected = 15;\n    int actual = Yahtzee().Chance(2,3,4,5,1);\n    assert(expected == actual);\n    assert(16 == Yahtzee().Chance(3,3,4,5,1));\n}\n\nstatic int * ints(int a, int b, int c, int d, int e)\n{\n    int * r = new int[5];\n    r[0] = a;\n    r[1] = b;\n    r[2] = c;\n    r[3] = d;\n    r[4] = e;\n    return r;\n}\n\nstatic void Yahtzee_scores_50(void) \n{\n    int expected = 50;\n    int actual = Yahtzee().yahtzee(ints(4,4,4,4,4));\n    assert(expected == actual);\n    assert(50 == Yahtzee().yahtzee(ints(6,6,6,6,6)));\n    assert(0 == Yahtzee().yahtzee(ints(6,6,6,6,3)));\n}\n\nstatic void Test_1s() \n{\n    assert(Yahtzee().Ones(1,2,3,4,5) == 1);\n    assert(2 == Yahtzee().Ones(1,2,1,4,5));\n    assert(0 == Yahtzee().Ones(6,2,2,4,5));\n    assert(4 == Yahtzee().Ones(1,2,1,1,1));\n}\n\nstatic void test_2s() \n{\n    assert(4 == Yahtzee().Twos(1,2,3,2,6));\n    assert(10 == Yahtzee().Twos(2,2,2,2,2));\n}\n\nstatic void test_threes() \n{\n    assert(6 == Yahtzee().Threes(1,2,3,2,3));\n    assert(12 == Yahtzee().Threes(2,3,3,3,3));\n}\n\nstatic void fours_test() \n{\n    assert(12 == (new Yahtzee(4,4,4,5,5))->Fours());\n    assert(8 == (new Yahtzee(4,4,5,5,5))->Fours());\n    assert(4 == (*new Yahtzee(4,5,5,5,5)).Fours());\n}\n\nstatic void fives() {\n    assert(10 == (new Yahtzee(4,4,4,5,5))->Fives());\n    assert(15 == Yahtzee(4,4,5,5,5).Fives());\n    assert(20 == Yahtzee(4,5,5,5,5).Fives());\n}\n\nstatic void sixes_test() \n{\n    assert(0 == Yahtzee(4,4,4,5,5).sixes());\n    assert(6 == Yahtzee(4,4,6,5,5).sixes());\n    assert(18 == Yahtzee(6,5,6,6,5).sixes());\n}\n\nstatic void one_pair() \n{\n    assert(6 == Yahtzee().ScorePair(3,4,3,5,6));\n    assert(10 == Yahtzee().ScorePair(5,3,3,3,5));\n    assert(12 == Yahtzee().ScorePair(5,3,6,6,5));\n}\n\nstatic void two_Pair() \n{\n    assert(16 == Yahtzee().TwoPair(3,3,5,4,5));\n    assert(0 == Yahtzee().TwoPair(3,3,5,5,5));\n}\n\nstatic void three_of_a_kind() \n{\n    assert(9 == Yahtzee().ThreeOfAKind(3,3,3,4,5));\n    assert(15 == Yahtzee().ThreeOfAKind(5,3,5,4,5));\n    assert(0 == Yahtzee::ThreeOfAKind(3,3,3,3,5));\n}\n\nstatic void four_of_a_knd() \n{\n    assert(12 == Yahtzee::FourOfAKind(3,3,3,3,5));\n    assert(20 == Yahtzee::FourOfAKind(5,5,5,4,5));\n    assert(0  == Yahtzee::FourOfAKind(3,3,3,3,3));\n}\n\nstatic void smallStraight() \n{\n    assert(15 == Yahtzee::SmallStraight(1,2,3,4,5));\n    assert(15 == Yahtzee::SmallStraight(2,3,4,5,1));\n    assert(0 == Yahtzee().SmallStraight(1,2,2,4,5));\n}\n\nstatic void largeStraight() \n{\n    assert(20 == Yahtzee::LargeStraight(6,2,3,4,5));\n    assert(20 == Yahtzee().LargeStraight(2,3,4,5,6));\n    assert(0== Yahtzee::LargeStraight(1,2,2,4,5));\n}\n\n\nstatic void fullHouse() \n{\n    assert(18 == Yahtzee().FullHouse(6,2,2,2,6));\n    assert(0 == Yahtzee().FullHouse(2,3,4,5,6));\n}\n\ntypedef void test();\n\nstatic test * tests[ ] =\n{\n    Chance_scores_sum_of_all_dice,\n    Yahtzee_scores_50,\n    Test_1s,\n    test_2s,\n    test_threes,\n    fours_test,\n    fives,\n    sixes_test,\n    one_pair,\n    two_Pair,\n    three_of_a_kind,\n    four_of_a_knd,\n    smallStraight,\n    largeStraight,\n    fullHouse,\n    static_cast<test*>(0),\n};\n\nint main()\n{\n    size_t at = 0;\n    while (tests[at])\n    {\n        tests[at++]();\n        std::cout << '.';\n    }\n    std::cout << std::endl << at << \" tests passed\" << std::endl;\n    return 0;\n}","yahtzee.hpp":"#ifndef YAHTZEE_INCLUDED\n#define YATHZEE_INCLUDED\n\nclass Yahtzee\n{\npublic:\n\n    static int Chance(int d1, int d2, int d3, int d4, int d5);\n    static int yahtzee(int dice[]);\n    static int Ones(int d1, int d2, int d3, int d4, int d5);\n    static int Twos(int d1, int d2, int d3, int d4, int d5);\n    static int Threes(int d1, int d2, int d3, int d4, int d5);\n\nprotected:\n    int * dice;\npublic:\n    Yahtzee();\n    Yahtzee(int d1, int d2, int d3, int d4, int _5);\n    int Fours();\n    int Fives();\n    int sixes();\n    int ScorePair(int d1, int d2, int d3, int d4, int d5);\n    static int TwoPair(int d1, int d2, int d3, int d4, int d5);\n    static int FourOfAKind(int _1, int _2, int d3, int d4, int d5);\n    static int ThreeOfAKind(int d1, int d2, int d3, int d4, int d5);\n\n    static int SmallStraight(int d1, int d2, int d3, int d4, int d5);\n    static int LargeStraight(int d1, int d2, int d3, int d4, int d5);\n    static int FullHouse(int d1, int d2, int d3, int d4, int d5);\n\n};\n\n#endif","makefile":"run.tests.output : run.tests\n\t./run.tests\n\nrun.tests : *.cpp\n\tg++ -Wall -Werror -O *.cpp -o run.tests\n\n\n","cyber-dojo.sh":"make\n","output":"g++ -Wall -Werror -O *.cpp -o run.tests\n./run.tests\n...............\n15 tests passed\n","instructions":"The game of yahtzee is a simple dice game. Each player\nrolls five six-sided dice. They can re-roll some or all\nof the dice up to three times (including the original roll).\n\nFor example, suppose a players rolls\n    3,4,5,5,2\nThey hold (-,-,5,5,-) and re-roll (3,4,-,-,2)\n    5,1,5,5,3\nThey hold (5,-,5,5,-) and re-roll (-,1,-,-,3)\n    5,6,5,5,2\n\nThe player then places the roll in a category, such as ones,\ntwos, fives, pair, two pairs etc (see below). If the roll is\ncompatible with the category, the player gets a score for the\nroll according to the rules. If the roll is not compatible\nwith the category, the player scores zero for the roll.\n\nFor example, suppose a player scores 5,6,5,5,2 in the fives\ncategory they would score 15 (three fives). The score for\nthat go is then added to their total and the category cannot\nbe used again in the remaining goes for that game. \nA full game consists of one go for each category. Thus, for\ntheir last go in a game, a player must choose their only\nremaining category.\n\nYour task is to score a GIVEN roll in a GIVEN category.\nYou do NOT have to program the random dice rolling.\nThe game is NOT played by letting the computer choose the\nhighest scoring category for a given roll.\n  \n\nYahzee Categories and Scoring Rules\n===================================\n\nChance: \n  The player scores the sum of all dice,\n  no matter what they read.\n  For example,\n   1,1,3,3,6 placed on \"chance\" scores 14 (1+1+3+3+6)\n   4,5,5,6,1 placed on \"chance\" scores 21 (4+5+5+6+1)  \n\nYahtzee: \n  If all dice have the same number,\n  the player scores 50 points. \n  For example,\n   1,1,1,1,1 placed on \"yahtzee\" scores 50\n   1,1,1,2,1 placed on \"yahtzee\" scores 0\n\nOnes, Twos, Threes, Fours, Fives, Sixes: \n  The player scores the sum of the dice that reads one, \n  two, three, four, five or six, respectively. \n  For example,  \n   1,1,2,4,4 placed on \"fours\" scores 8 (4+4)\n   2,3,2,5,1 placed on \"twos\" scores 4  (2+2)\n   3,3,3,4,5 placed on \"ones\" scores 0\n\nPair: \n  The player scores the sum of the two highest matching dice.\n  For example, when placed on \"pair\" \n   3,3,3,4,4 scores 8 (4+4)\n   1,1,6,2,6 scores 12 (6+6)\n   3,3,3,4,1 scores 0\n   3,3,3,3,1 scores 0\n\nTwo pairs: \n  If there are two pairs of dice with the same number, the\n  player scores the sum of these dice. \n  For example, when placed on \"two pairs\"\n   1,1,2,3,3 scores 8 (1+1+3+3)\n   1,1,2,3,4 scores 0\n   1,1,2,2,2 scores 0\n\nThree of a kind: \n  If there are three dice with the same number, the player\n  scores the sum of these dice. \n  For example, when placed on \"three of a kind\"  \n    3,3,3,4,5 scores 9 (3+3+3)\n    3,3,4,5,6 scores 0\n    3,3,3,3,1 scores 0\n\nFour of a kind: \n  If there are four dice with the same number, the player\n  scores the sum of these dice. \n  For example, when placed on \"four of a kind\"  \n    2,2,2,2,5 scores 8 (2+2+2+2)\n    2,2,2,5,5 scores 0\n    2,2,2,2,2 scores 0\n\nSmall straight: \n  When placed on \"small straight\", if the dice read \n  1,2,3,4,5, the player scores 15 (the sum of all the dice.\n\nLarge straight: \n  When placed on \"large straight\", if the dice read \n  2,3,4,5,6, the player scores 20 (the sum of all the dice).\n\nFull house: \n  If the dice are two of a kind and three of a kind, the\n  player scores the sum of all the dice. \n  For example, when placed on \"full house\"  \n    1,1,2,2,2 scores 8 (1+1+2+2+2) \n    2,2,3,3,4 scores 0\n    4,4,4,4,4 scores 0\n\n  \n"}}