{"created":[2014,6,9,13,53,13],"id":"0A6A337689","language":"C++-CppUTest","exercise":"100_doors","unit_test_framework":"cpputest","tab_size":4,"visible_files":{"LedDriverTest.cpp":"#include \"LedDriver.h\"\n#include \"CppUTest/TestHarness.h\"\n\nTEST_GROUP(LedDriver)\n{   \n    uint16_t virtualLeds; \n    void setup()\n    {\n        LedDriver_Create(&virtualLeds);\n    }\n\n    void teardown()\n    {\n    }\n};\n\nTEST(LedDriver, LedsOffAfterCreate)\n{\n  virtualLeds = 0xffff;\n  LedDriver_Create(&virtualLeds);\n  LONGS_EQUAL(0, virtualLeds);\n}\n\nTEST(LedDriver, TurnOnLedOne)\n{\n  LedDriver_TurnOn(1);\n  LONGS_EQUAL(1, virtualLeds);\n}\n\nTEST(LedDriver, TurnOffLedOne)\n{\n  LedDriver_TurnOn(1);\n  LedDriver_TurnOff(1);\n  LONGS_EQUAL(0, virtualLeds);\n}\n\nTEST(LedDriver, TurnOnMultipleLeds)\n{\n  LedDriver_TurnOn(8);\n  LedDriver_TurnOn(9);\n  LONGS_EQUAL(0x180, virtualLeds);\n}\n\nTEST(LedDriver, TurnOffAnyLed)\n{\n  LedDriver_TurnOn(8);\n  LedDriver_TurnOn(9);\n  LedDriver_TurnOff(9);\n  LONGS_EQUAL(0x80, virtualLeds);\n}\n\nTEST(LedDriver, TurnAllOn)\n{\n  LedDriver_TurnAllOn();\n  LONGS_EQUAL(0xffff, virtualLeds);  \n}\n\nTEST(LedDriver, LedMemoryIsNotReadable)\n{\n  virtualLeds = 0xffff;\n  LedDriver_TurnOn(8);\n  LONGS_EQUAL(0x80, virtualLeds);  \n}\n\nTEST(LedDriver, UpperAndLowerBounds)\n{\n  LedDriver_TurnOn(1);\n  LedDriver_TurnOn(16);\n  LONGS_EQUAL(0x8001, virtualLeds);  \n}\n\nTEST(LedDriver, OutOfBoundsTurnOnChangeNothing)\n{\n  LedDriver_TurnOn(-1);\n  LONGS_EQUAL(0x0, virtualLeds);\n  LedDriver_TurnOn(0);\n  LONGS_EQUAL(0x0, virtualLeds);\n  LedDriver_TurnOn(17);\n  LONGS_EQUAL(0x0, virtualLeds);\n  LedDriver_TurnOn(3141);\n  LONGS_EQUAL(0x0, virtualLeds);  \n}\n\nTEST(LedDriver, OutOfBoundsTurnOffChangeNothing)\n{\n  LedDriver_TurnAllOn();\n  LedDriver_TurnOff(-1);\n  LONGS_EQUAL(0xffff, virtualLeds);\n  LedDriver_TurnOff(0);\n  LONGS_EQUAL(0xffff, virtualLeds);\n  LedDriver_TurnOff(17);\n  LONGS_EQUAL(0xffff, virtualLeds);\n  LedDriver_TurnOff(3141);\n  LONGS_EQUAL(0xffff, virtualLeds);  \n}","LedDriver.h":"#ifndef D_LedDriver_H\n#define D_LedDriver_H\n\nvoid LedDriver_Create(uint16_t * address);\nvoid LedDriver_Destroy(void);\n\nvoid LedDriver_TurnOn(int ledNumber);\nvoid LedDriver_TurnOff(int ledNumber);\nvoid LedDriver_TurnAllOn();\n#endif  /* D_LedDriver_H */","LedDriver.cpp":"#include \"LedDriver.h\"\n#include <stdlib.h>\n#include <memory.h>\n\nstatic uint16_t * ledsAddress;\nstatic uint16_t ledsImage;\nenum{ALL_LEDS_ON=~0, ALL_LEDS_OFF=~ALL_LEDS_ON};\nenum{MIN_LED_NUMBER=1, MAX_LED_NUMBER=16};\n\nstatic uint16_t changeLedNumberToBit(int ledNumber)\n{\n  return 1 << (ledNumber-1);\n}\n\nstatic void updateLedState(void)\n{\n  *ledsAddress = ledsImage;\n}\n\nvoid LedDriver_Create(uint16_t * address)\n{\n  ledsAddress = address; \n  ledsImage = ALL_LEDS_OFF;\n  updateLedState();\n}\n\nvoid LedDriver_Destroy(void)\n{\n}\n\nvoid LedDriver_TurnOn(int ledNumber)\n{\n  if ((ledNumber < MIN_LED_NUMBER) || (ledNumber > MAX_LED_NUMBER))\n  {\n    return;\n  }\n  ledsImage |= changeLedNumberToBit(ledNumber);\n  updateLedState();\n}\n\nvoid LedDriver_TurnOff(int ledNumber)\n{\n  if ((ledNumber < MIN_LED_NUMBER) || (ledNumber > MAX_LED_NUMBER))\n  {\n    return;\n  }\n  ledsImage &= ~changeLedNumberToBit(ledNumber);\n  updateLedState();\n}\n\nvoid LedDriver_TurnAllOn()\n{\n  ledsImage = ALL_LEDS_ON;\n  updateLedState();\n}","output":"Making clean\ncompiling AllTests.cpp\ncompiling LedDriverTest.cpp\ncompiling LedDriver.cpp\nBuilding archive lib/libLedDriver_CppUTest.a\na - objs/LedDriver.o\nLinking LedDriver_CppUTest_tests\nRunning LedDriver_CppUTest_tests\n..........\nOK (10 tests, 10 ran, 16 checks, 0 ignored, 0 filtered out, 1 ms)\n\n"}}