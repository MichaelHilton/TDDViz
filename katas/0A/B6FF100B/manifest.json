{"created":[2013,12,26,16,37,52],"id":"0AB6FF100B","browser":"Mozilla/5.0 (Windows NT 6.2; WOW64; rv:25.0) Gecko/20100101 Firefox/25.0","language":"Java-Cucumber","exercise":"Fizz_Buzz","unit_test_framework":"junit","tab_size":4,"visible_files":{"Untitled.java":"\npublic class Untitled {\n    \n    public static int answer(int lhs, int rhs) {\n        return lhs * rhs;\n    }\n}\n","UntitledStepDef.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport cucumber.annotation.en.*;\nimport cucumber.runtime.*;\n\npublic class UntitledStepDef {\n\n    private int answer;\n    \n    @Given(\"^the hitch-hiker selects some tiles$\")\n    public void the_hitch_hiker_selects_some_tiles() throws Throwable {\n    }\n    \n    @When(\"^they spell (\\\\d+) times (\\\\d+)$\")\n    public void they_spell_times(int arg1, int arg2) throws Throwable {\n        answer = Untitled.answer(arg1,arg2);\n    }\n\n    @Then(\"^the score is (\\\\d+)$\")\n    public void the_score_is(int expected) throws Throwable {\n        assertEquals(expected, answer);\n    }\n}\n","Untitled.feature":"\nFeature: hitch-hiker playing scrabble\n\nScenario: last earthling playing scrabble in the past\nGiven the hitch-hiker selects some tiles\nWhen they spell 6 times 9\nThen the score is 42\n\n\n","RunCukesTest.java":"import cucumber.junit.Cucumber;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@Cucumber.Options(strict=true)\npublic class RunCukesTest {\n    // this is the adapter/bridge code\n    // between cucumber jvm and junit\n    // you do not need to edit this\n}\n ","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -cp $CLASSES  *.java   \nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore RunCukesTest\nfi\n\n\n","output":"","instructions":"Write a program that prints the numbers from 1 to 100.\nBut for multiples of three print \"Fizz\" instead of the\nnumber and for the multiples of five print \"Buzz\". For\nnumbers which are multiples of both three and five\nprint \"FizzBuzz\".\n\nSample output:\n\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\n... etc up to 100\n"}}