<!DOCTYPE html>
<meta charset="utf-8">
<%= include_gon %>

<script src="//code.jquery.com/jquery-1.11.2.min.js"></script>
<script src="//code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
<script src="//cdn.datatables.net/1.10.4/js/jquery.dataTables.min.js"></script>
<script src="//code.jquery.com/ui/1.11.2/jquery-ui.js"></script>
<link rel="stylesheet" href="//cdn.datatables.net/1.10.4/css/jquery.dataTables.min.css">
<link rel="stylesheet" href="//code.jquery.com/ui/1.11.2/themes/smoothness/jquery-ui.css">

<script>
$(function() {

});
</script>

<input type="hidden" id="refreshed" value="no">
<script type="text/javascript">
//this will reload the page.  Kinda a hack, will implement ajax table loading when I have more time.
// onload=function(){
//   var e=document.getElementById("refreshed");
//   if(e.value=="no")e.value="yes";
//   else{e.value="no";location.reload();}
//     }
    </script>

    <style>
    td.view_kata {
      background: url('<%= image_url('icons/icon_component.gif') %>') no-repeat center center;
      cursor: pointer;
    }
    td.markup {
      background: url('<%= image_url('icons/pencil.png') %>') no-repeat center center;
      cursor: pointer;
    }
    td.comparison {
      background: url('<%= image_url('icons/copy.gif') %>') no-repeat center center;
      cursor: pointer;
    }
    /*/comparison*/

    td.compile_count {
      text-align: center;
    }
    td.markup_length {
      text-align: center;
    }
    .ui-button{
      height:20px;
    }
    .ui-button-text{
      font-size: 10px;
    }
    </style>

    <h2>Manual Markup Assignments for <%= @researcher %></h3>
    <b>Precision: </b><a id="PrecisionValue"></a>
    <b>Recall: </b><a id="RecallValue"></a>
    <b>InterRater: </b><a id="InterRater"></a>
    <BR><BR>


    <table id="myTable" class="display" cellspacing="0" width="100%">
    <thead>
    <tr>
    <th>Display<br>Cycles</th>
    <th>Compile<br>Count</th>
    <th>CyberDojo<br>ID</th>
    <th>Avatar</th>
    <th>Kata<br>Name</th>
    <th>Markups</th>
    <th>Markup Agreement</th>
    <th>Precision</th>
    <th>Recall</th>
    <th>InterRated</th>
    <th>InterRater Agreement</th>
    <th>Markup</th>
    <th>Comparison</th>
    </tr>
    </thead>

    <tfoot>
    <tr>
    <th>Display<br>Cycles</th>
    <th>Compile<br>Count</th>
    <th>CyberDojo<br>ID</th>
    <th>Avatar</th>
    <th>Kata<br>Name</th>
    <th>Markups</th>
    <th>Markup Agreement</th>
    <th>Precision</th>
    <th>Recall</th>
    <th>InterRated</th>
    <th>InterRater Agreement</th>
    <th>Markup</th>
    <th>Comparison</th>
    </tr>
    </tfoot>

    </table>

<script>
$(document).ready(function() {
      // console.log(gon);
      gon.all_sessions_markup.forEach(
        function(element, index) {
          if (element.markup.length == 0) {
            element.numAgreed = "NA"
            element.session.markedupBy = "None"
            return;
          }
          console.log("Num Markups:" + element.markup.length);
          // console.log(element);
          // console.log(index);
          var totalMarkedUpPhases = 0;
          var markedupBy = new Object();
          var MarkupGrid = new Object();
          for (var i = 0; i < element.markup.length; i++) {
            var numMarkedupPhases = element.markup[i].last_compile_in_phase - element.markup[i].first_compile_in_phase;
            var tempMarkup = markedupBy[element.markup[i].user];
            if (tempMarkup == undefined) {
              tempMarkup = 0;
            }
            markedupBy[element.markup[i].user] = tempMarkup + numMarkedupPhases;

            var currMarkup = element.markup[i];

            if (MarkupGrid[currMarkup.user] == undefined) {
              MarkupGrid[currMarkup.user] = new Array();
            }

            for (var j = currMarkup.first_compile_in_phase; j < currMarkup.last_compile_in_phase; j++) {
              // console.log("currMarkup.user: " + currMarkup.user);
              // console.log("currMarkup.tdd_color: " + currMarkup.tdd_color);
              // console.log("currMarkup.first_compile_in_phase: " + currMarkup.first_compile_in_phase);
              // console.log("currMarkup.last_compile_in_phase: " + currMarkup.last_compile_in_phase);
              // console.log("j" + j);
              MarkupGrid[currMarkup.user][j] = currMarkup.tdd_color;
            }



          }
          if (markedupBy == null) {
            element.session.markedupBy = "None"
          } else {
            element.session.markedupBy = JSON.stringify(markedupBy);
          }

          // console.log(MarkupGrid);
          console.log(element.session);
          var numAgreed = 0;
          var keys = Object.keys(MarkupGrid);
          if (keys.length > 1) {
            for (var k = 0; k < element.compile_count[0]; k++) {
              var inagreement = true;
              for (var l = 1; l < keys.length; l++) {
                // console.log("MarkupGrid[keys[0]][k]"+MarkupGrid[keys[0]][k]);
                // console.log("MarkupGrid[keys[l]][k]"+MarkupGrid[keys[l]][k]);
                if (MarkupGrid[keys[0]][k] != MarkupGrid[keys[l]][k]) {
                  inagreement = false;
                  // console.log(MarkupGrid);
                  // console.log("k:"+k);
                  // console.log("l:"+l);
                  break;
                }
              }
              if (inagreement) {
                numAgreed = numAgreed + 1;
              }
            }
          } else {
            numAgreed = 0;
          }
          // console.log(numAgreed);
          element.numAgreed = numAgreed
        });

      var totalAgreed = 0;
      var totalMarkup = 0;
      var totalPrecision = 0;
      for (var i = 0; i < gon.all_sessions_markup.length; i++) {
        if (gon.all_sessions_markup[i].markup.length > 0) {
          // console.log(gon.all_sessions_markup[i].numAgreed);
          totalMarkup += gon.all_sessions_markup[i].compile_count[0];
          totalAgreed += gon.all_sessions_markup[i].numAgreed;
          gon.all_sessions_markup[i].interaterAgreement = gon.all_sessions_markup[i].numAgreed / gon.all_sessions_markup[i].compile_count[0];
        } else {
          gon.all_sessions_markup[i].interaterAgreement = "NA"
        }
      }
// console.log(totalAgreed);
// console.log(totalMarkup);
$("#InterRater").html(totalAgreed / totalMarkup);

  table = $('#myTable').DataTable({
    "data": gon.all_sessions_markup,
    "columns": [{
      "className": 'view_kata',
      "orderable": false,
      "data": null,
      "defaultContent": '',
      "width": '20px'
    }, {
      "className": 'compile_count',
      "data": 'compile_count',
      "defaultContent": 'dt-center',
      "width": '20px'
    }, {
      "className": 'cyberdojo_id',
      "data": 'session.cyberdojo_id',
      "width": '50px'
    }, {
      "className": 'avatar',
      "data": 'session.avatar',
      "width": '30px'
    }, {
      "className": 'kata_name',
      "data": 'session.kata_name',
      "width": '40px'

    }, {
      "className": 'markup_length',
      "data": 'session.markedupBy',
      "width": '20px'
    }, {
      "className": 'markup_agreement',
      "data": 'numAgreed',
      "width": '20px'
    }, {
      "className": 'precision',
      "data": 'precision',
      "width": '20px'
    }, {
      "className": 'recall',
      "data": 'recall',
      "width": '20px'
    }, {
      "className": 'inter_rated',
      "data": 'interRater',
      "width": '20px'
    }, {
      "className": 'inter_rated',
      "data": 'interaterAgreement',
      "width": '20px'
    }, {
      "className": 'markup',
      "orderable": false,
      "data": null,
      "defaultContent": '',
      "width": '20px'
    }, {
      "className": 'comparison',
      "orderable": false,
      "data": null,
      "defaultContent": '',
      "width": '20px'
    }]
  });
});


// Add event listener for opening and closing details
$('#myTable').on('click', 'td.view_kata', function() {
  var researcher = "<%= @researcher %>"
  var cyberdojo_id = $(this).parent().find(".cyberdojo_id").html();
  var avatar = $(this).parent().find(".avatar").html();
  var kata_name = $(this).parent().find(".kata_name").html();
  // window.location.href = "timelineWithBrush?researcher=" + researcher + "&id=" + cyberdojo_id + "&avatar=" + avatar + "&kataName=" + kata_name;

  var newLocation = "timelineWithBrush?researcher=" + researcher + "&id=" + cyberdojo_id + "&avatar=" + avatar + "&kataName=" + kata_name;

  window.open(newLocation);
});

$('#myTable').on('click', 'td.markup', function() {
  var researcher = "<%= @researcher %>"
  var cyberdojo_id = $(this).parent().find(".cyberdojo_id").html();
  var avatar = $(this).parent().find(".avatar").html();
  var kata_name = $(this).parent().find(".kata_name").html();
  // window.location.href = "manualCatTool?researcher=" + researcher + "&id=" + cyberdojo_id + "&avatar=" + avatar + "&kataName=" + kata_name;
  var newLocation = "manualCatTool?researcher=" + researcher + "&id=" + cyberdojo_id + "&avatar=" + avatar + "&kataName=" + kata_name;
window.open(newLocation);
});

$('#myTable').on('click', 'td.comparison', function() {
  var researcher = "<%= @researcher %>"
  var cyberdojo_id = $(this).parent().find(".cyberdojo_id").html();
  var avatar = $(this).parent().find(".avatar").html();
  var kata_name = $(this).parent().find(".kata_name").html();
  // window.location.href = "markup_comparison?researcher=" + researcher + "&id=" + cyberdojo_id + "&avatar=" + avatar + "&kataName=" + kata_name;
  var newLocation = "markup_comparison?researcher=" + researcher + "&id=" + cyberdojo_id + "&avatar=" + avatar + "&kataName=" + kata_name;
  window.open(newLocation);
});


$("#PrecisionValue").html(gon.totalMarkedCompiles / gon.totalCompiles);
$("#RecallValue").html(gon.totalNumCorrect / (gon.totalNumCorrect + gon.totalNumInCorrect));


</script>
